namespace {namespace};

public record Update{itemname}Command(Guid Id): ICacheInvalidatorCommand
{
    {dtoFieldDefinition}
    public string CacheKey => CacheKeys.{itemname};
}

internal sealed class Update{itemname}CommandHandler(
    IApplicationDbContext dbContext) 
    : ICommandHandler<Update{itemname}Command>
{
    public async Task<Result> Handle(Update{itemname}Command request, CancellationToken cancellationToken)
    {
        var entity = await dbContext.{nameofPlural}.FindAsync([request.Id], cancellationToken);

        if (entity is null) return Result.Failure(Error.NotFound(nameof(entity), ErrorMessages.EntityNotFound));

        request.Adapt(entity);

        await dbContext.SaveChangesAsync(cancellationToken);

        return Result.Success();
    }
}