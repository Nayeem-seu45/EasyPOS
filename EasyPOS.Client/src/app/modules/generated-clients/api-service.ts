//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IAccountsClient {
    getAll(query: GetAccountsListQuery): Observable<PaginatedResponseOfAccountModel>;
    get(id: string): Observable<AccountModel>;
    create(command: CreateAccountCommand): Observable<string>;
    update(command: UpdateAccountCommand): Observable<void>;
    delete(id: string): Observable<void>;
    deleteMultiple(ids: string[]): Observable<void>;
    login(command: LoginRequestCommand): Observable<AuthenticatedResponse>;
    refreshToken(): Observable<AuthenticatedResponse>;
    logout(): Observable<void>;
    changePassword(command: ChangePasswordCommand): Observable<void>;
    getUserPermissions(allowCache: boolean | undefined): Observable<string[]>;
}

@Injectable()
export class AccountsClient implements IAccountsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(query: GetAccountsListQuery): Observable<PaginatedResponseOfAccountModel> {
        let url_ = this.baseUrl + "/api/Accounts/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfAccountModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfAccountModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaginatedResponseOfAccountModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfAccountModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: string): Observable<AccountModel> {
        let url_ = this.baseUrl + "/api/Accounts/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AccountModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AccountModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<AccountModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AccountModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateAccountCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Accounts/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(command: UpdateAccountCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Accounts/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Accounts/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteMultiple(ids: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Accounts/DeleteMultiple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMultiple(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMultiple(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteMultiple(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    login(command: LoginRequestCommand): Observable<AuthenticatedResponse> {
        let url_ = this.baseUrl + "/api/Accounts/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthenticatedResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthenticatedResponse>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<AuthenticatedResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthenticatedResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    refreshToken(): Observable<AuthenticatedResponse> {
        let url_ = this.baseUrl + "/api/Accounts/RefreshToken";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRefreshToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRefreshToken(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthenticatedResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthenticatedResponse>;
        }));
    }

    protected processRefreshToken(response: HttpResponseBase): Observable<AuthenticatedResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthenticatedResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    logout(): Observable<void> {
        let url_ = this.baseUrl + "/api/Accounts/Logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogout(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processLogout(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    changePassword(command: ChangePasswordCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Accounts/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processChangePassword(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getUserPermissions(allowCache: boolean | undefined): Observable<string[]> {
        let url_ = this.baseUrl + "/api/Accounts/GetUserPermissions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(allowCache);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserPermissions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserPermissions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string[]>;
        }));
    }

    protected processGetUserPermissions(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IMoneyTransfersClient {
    getAll(query: GetMoneyTransfersListQuery): Observable<PaginatedResponseOfMoneyTransferModel>;
    get(id: string): Observable<MoneyTransferModel>;
    create(command: CreateMoneyTransferCommand): Observable<string>;
    update(command: UpdateMoneyTransferCommand): Observable<void>;
    delete(id: string): Observable<void>;
    deleteMultiple(ids: string[]): Observable<void>;
}

@Injectable()
export class MoneyTransfersClient implements IMoneyTransfersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(query: GetMoneyTransfersListQuery): Observable<PaginatedResponseOfMoneyTransferModel> {
        let url_ = this.baseUrl + "/api/MoneyTransfers/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfMoneyTransferModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfMoneyTransferModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaginatedResponseOfMoneyTransferModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfMoneyTransferModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: string): Observable<MoneyTransferModel> {
        let url_ = this.baseUrl + "/api/MoneyTransfers/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MoneyTransferModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MoneyTransferModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<MoneyTransferModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MoneyTransferModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateMoneyTransferCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/MoneyTransfers/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(command: UpdateMoneyTransferCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/MoneyTransfers/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/MoneyTransfers/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteMultiple(ids: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/MoneyTransfers/DeleteMultiple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMultiple(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMultiple(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteMultiple(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IImagesClient {
    images(fileName: string): Observable<void>;
}

@Injectable()
export class ImagesClient implements IImagesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    images(fileName: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Images/{fileName}";
        if (fileName === undefined || fileName === null)
            throw new Error("The parameter 'fileName' must be defined.");
        url_ = url_.replace("{fileName}", encodeURIComponent("" + fileName));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processImages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processImages(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processImages(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ILookupDetailsClient {
    getAll(query: GetLookupDetailListQuery): Observable<PaginatedResponseOfLookupDetailModel>;
    get(id: string): Observable<LookupDetailModel>;
    create(command: CreateLookupDetailCommand): Observable<string>;
    update(command: UpdateLookupDetailCommand): Observable<void>;
    delete(id: string): Observable<void>;
    deleteMultiple(ids: string[]): Observable<void>;
    upload(): Observable<number>;
}

@Injectable()
export class LookupDetailsClient implements ILookupDetailsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(query: GetLookupDetailListQuery): Observable<PaginatedResponseOfLookupDetailModel> {
        let url_ = this.baseUrl + "/api/LookupDetails/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfLookupDetailModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfLookupDetailModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaginatedResponseOfLookupDetailModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfLookupDetailModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: string): Observable<LookupDetailModel> {
        let url_ = this.baseUrl + "/api/LookupDetails/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LookupDetailModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LookupDetailModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<LookupDetailModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LookupDetailModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateLookupDetailCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/LookupDetails/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(command: UpdateLookupDetailCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/LookupDetails/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/LookupDetails/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteMultiple(ids: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/LookupDetails/DeleteMultiple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMultiple(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMultiple(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteMultiple(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    upload(): Observable<number> {
        let url_ = this.baseUrl + "/api/LookupDetails/Upload";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpload(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpload(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processUpload(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ILookupsClient {
    getAll(query: GetLookupListQuery): Observable<PaginatedResponseOfLookupModel>;
    get(id: string): Observable<LookupModel>;
    create(command: CreateLookupCommand): Observable<string>;
    update(command: UpdateLookupCommand): Observable<void>;
    delete(id: string): Observable<void>;
}

@Injectable()
export class LookupsClient implements ILookupsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(query: GetLookupListQuery): Observable<PaginatedResponseOfLookupModel> {
        let url_ = this.baseUrl + "/api/Lookups/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfLookupModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfLookupModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaginatedResponseOfLookupModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfLookupModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: string): Observable<LookupModel> {
        let url_ = this.baseUrl + "/api/Lookups/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LookupModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LookupModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<LookupModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LookupModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateLookupCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Lookups/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(command: UpdateLookupCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Lookups/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Lookups/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IBrandsClient {
    getAll(query: GetBrandListQuery): Observable<PaginatedResponseOfBrandModel>;
    get(id: string): Observable<BrandModel>;
    create(command: CreateBrandCommand): Observable<string>;
    update(command: UpdateBrandCommand): Observable<void>;
    delete(id: string): Observable<void>;
    deleteMultiple(ids: string[]): Observable<void>;
}

@Injectable()
export class BrandsClient implements IBrandsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(query: GetBrandListQuery): Observable<PaginatedResponseOfBrandModel> {
        let url_ = this.baseUrl + "/api/Brands/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfBrandModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfBrandModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaginatedResponseOfBrandModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfBrandModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: string): Observable<BrandModel> {
        let url_ = this.baseUrl + "/api/Brands/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BrandModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BrandModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<BrandModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateBrandCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Brands/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(command: UpdateBrandCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Brands/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Brands/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteMultiple(ids: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Brands/DeleteMultiple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMultiple(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMultiple(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteMultiple(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ICategoriesClient {
    getAll(query: GetCategoryListQuery): Observable<PaginatedResponseOfCategoryModel>;
    get(id: string): Observable<CategoryModel>;
    create(command: CreateCategoryCommand): Observable<string>;
    update(command: UpdateCategoryCommand): Observable<void>;
    delete(id: string): Observable<void>;
    deleteMultiple(ids: string[]): Observable<void>;
    upload(): Observable<number>;
}

@Injectable()
export class CategoriesClient implements ICategoriesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(query: GetCategoryListQuery): Observable<PaginatedResponseOfCategoryModel> {
        let url_ = this.baseUrl + "/api/Categories/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfCategoryModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfCategoryModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaginatedResponseOfCategoryModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfCategoryModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: string): Observable<CategoryModel> {
        let url_ = this.baseUrl + "/api/Categories/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CategoryModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CategoryModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<CategoryModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateCategoryCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Categories/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(command: UpdateCategoryCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Categories/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Categories/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteMultiple(ids: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Categories/DeleteMultiple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMultiple(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMultiple(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteMultiple(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    upload(): Observable<number> {
        let url_ = this.baseUrl + "/api/Categories/Upload";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpload(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpload(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processUpload(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IProductsClient {
    getAll(query: GetProductListQuery): Observable<PaginatedResponseOfProductModel>;
    get(id: string): Observable<ProductModel>;
    create(command: CreateProductCommand): Observable<string>;
    update(command: UpdateProductCommand): Observable<void>;
    delete(id: string): Observable<void>;
    deleteMultiple(ids: string[]): Observable<void>;
    upload(): Observable<number>;
}

@Injectable()
export class ProductsClient implements IProductsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(query: GetProductListQuery): Observable<PaginatedResponseOfProductModel> {
        let url_ = this.baseUrl + "/api/Products/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfProductModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfProductModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaginatedResponseOfProductModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfProductModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: string): Observable<ProductModel> {
        let url_ = this.baseUrl + "/api/Products/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ProductModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ProductModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<ProductModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateProductCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Products/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(command: UpdateProductCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Products/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Products/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteMultiple(ids: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Products/DeleteMultiple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMultiple(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMultiple(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteMultiple(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    upload(): Observable<number> {
        let url_ = this.baseUrl + "/api/Products/Upload";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpload(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpload(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processUpload(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IUnitsClient {
    getAll(query: GetUnitListQuery): Observable<PaginatedResponseOfUnitModel>;
    get(id: string): Observable<UnitModel>;
    create(command: CreateUnitCommand): Observable<string>;
    update(command: UpdateUnitCommand): Observable<void>;
    delete(id: string): Observable<void>;
    deleteMultiple(ids: string[]): Observable<void>;
}

@Injectable()
export class UnitsClient implements IUnitsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(query: GetUnitListQuery): Observable<PaginatedResponseOfUnitModel> {
        let url_ = this.baseUrl + "/api/Units/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfUnitModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfUnitModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaginatedResponseOfUnitModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfUnitModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: string): Observable<UnitModel> {
        let url_ = this.baseUrl + "/api/Units/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UnitModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UnitModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<UnitModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UnitModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateUnitCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Units/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(command: UpdateUnitCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Units/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Units/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteMultiple(ids: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Units/DeleteMultiple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMultiple(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMultiple(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteMultiple(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IWarehousesClient {
    getAll(query: GetWarehouseListQuery): Observable<PaginatedResponseOfWarehouseModel>;
    get(id: string): Observable<WarehouseModel>;
    create(command: CreateWarehouseCommand): Observable<string>;
    update(command: UpdateWarehouseCommand): Observable<void>;
    delete(id: string): Observable<void>;
    deleteMultiple(ids: string[]): Observable<void>;
    upload(): Observable<number>;
}

@Injectable()
export class WarehousesClient implements IWarehousesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(query: GetWarehouseListQuery): Observable<PaginatedResponseOfWarehouseModel> {
        let url_ = this.baseUrl + "/api/Warehouses/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfWarehouseModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfWarehouseModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaginatedResponseOfWarehouseModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfWarehouseModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: string): Observable<WarehouseModel> {
        let url_ = this.baseUrl + "/api/Warehouses/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WarehouseModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WarehouseModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<WarehouseModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WarehouseModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateWarehouseCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Warehouses/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(command: UpdateWarehouseCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Warehouses/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Warehouses/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteMultiple(ids: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Warehouses/DeleteMultiple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMultiple(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMultiple(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteMultiple(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    upload(): Observable<number> {
        let url_ = this.baseUrl + "/api/Warehouses/Upload";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpload(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpload(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processUpload(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ISelectListsClient {
    getLookupSelectList(allowCache: boolean | null | undefined): Observable<SelectListModel[]>;
    getLookupDetailSelectList(allowCache: boolean | null | undefined): Observable<SelectListModel[]>;
    getRoleSelectList(allowCache: boolean | null | undefined): Observable<SelectListModel[]>;
    getMenuTypeSelectList(allowCache: boolean | null | undefined): Observable<SelectListModel[]>;
}

@Injectable()
export class SelectListsClient implements ISelectListsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getLookupSelectList(allowCache: boolean | null | undefined): Observable<SelectListModel[]> {
        let url_ = this.baseUrl + "/api/SelectLists/GetLookupSelectList?";
        if (allowCache !== undefined && allowCache !== null)
            url_ += "allowCache=" + encodeURIComponent("" + allowCache) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLookupSelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLookupSelectList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SelectListModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SelectListModel[]>;
        }));
    }

    protected processGetLookupSelectList(response: HttpResponseBase): Observable<SelectListModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getLookupDetailSelectList(allowCache: boolean | null | undefined): Observable<SelectListModel[]> {
        let url_ = this.baseUrl + "/api/SelectLists/GetLookupDetailSelectList?";
        if (allowCache !== undefined && allowCache !== null)
            url_ += "allowCache=" + encodeURIComponent("" + allowCache) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetLookupDetailSelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetLookupDetailSelectList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SelectListModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SelectListModel[]>;
        }));
    }

    protected processGetLookupDetailSelectList(response: HttpResponseBase): Observable<SelectListModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getRoleSelectList(allowCache: boolean | null | undefined): Observable<SelectListModel[]> {
        let url_ = this.baseUrl + "/api/SelectLists/GetRoleSelectList?";
        if (allowCache !== undefined && allowCache !== null)
            url_ += "allowCache=" + encodeURIComponent("" + allowCache) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoleSelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoleSelectList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SelectListModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SelectListModel[]>;
        }));
    }

    protected processGetRoleSelectList(response: HttpResponseBase): Observable<SelectListModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getMenuTypeSelectList(allowCache: boolean | null | undefined): Observable<SelectListModel[]> {
        let url_ = this.baseUrl + "/api/SelectLists/GetMenuTypeSelectList?";
        if (allowCache !== undefined && allowCache !== null)
            url_ += "allowCache=" + encodeURIComponent("" + allowCache) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMenuTypeSelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMenuTypeSelectList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SelectListModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SelectListModel[]>;
        }));
    }

    protected processGetMenuTypeSelectList(response: HttpResponseBase): Observable<SelectListModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SelectListModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ICustomerGroupsClient {
    getAll(query: GetCustomerGroupListQuery): Observable<PaginatedResponseOfCustomerGroupModel>;
    get(id: string): Observable<CustomerGroupModel>;
    create(command: CreateCustomerGroupCommand): Observable<string>;
    update(command: UpdateCustomerGroupCommand): Observable<void>;
    delete(id: string): Observable<void>;
    deleteMultiple(ids: string[]): Observable<void>;
}

@Injectable()
export class CustomerGroupsClient implements ICustomerGroupsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(query: GetCustomerGroupListQuery): Observable<PaginatedResponseOfCustomerGroupModel> {
        let url_ = this.baseUrl + "/api/CustomerGroups/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfCustomerGroupModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfCustomerGroupModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaginatedResponseOfCustomerGroupModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfCustomerGroupModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: string): Observable<CustomerGroupModel> {
        let url_ = this.baseUrl + "/api/CustomerGroups/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CustomerGroupModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CustomerGroupModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<CustomerGroupModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomerGroupModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateCustomerGroupCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/CustomerGroups/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(command: UpdateCustomerGroupCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/CustomerGroups/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/CustomerGroups/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteMultiple(ids: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/CustomerGroups/DeleteMultiple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMultiple(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMultiple(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteMultiple(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ICustomersClient {
    getAll(query: GetCustomerListQuery): Observable<PaginatedResponseOfCustomerModel>;
    get(id: string): Observable<CustomerModel>;
    create(command: CreateCustomerCommand): Observable<string>;
    update(command: UpdateCustomerCommand): Observable<void>;
    delete(id: string): Observable<void>;
    deleteMultiple(ids: string[]): Observable<void>;
    upload(): Observable<number>;
}

@Injectable()
export class CustomersClient implements ICustomersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(query: GetCustomerListQuery): Observable<PaginatedResponseOfCustomerModel> {
        let url_ = this.baseUrl + "/api/Customers/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfCustomerModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfCustomerModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaginatedResponseOfCustomerModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfCustomerModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: string): Observable<CustomerModel> {
        let url_ = this.baseUrl + "/api/Customers/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CustomerModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CustomerModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<CustomerModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomerModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateCustomerCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Customers/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(command: UpdateCustomerCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Customers/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Customers/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteMultiple(ids: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Customers/DeleteMultiple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMultiple(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMultiple(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteMultiple(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    upload(): Observable<number> {
        let url_ = this.baseUrl + "/api/Customers/Upload";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpload(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpload(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processUpload(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ISuppliersClient {
    getAll(query: GetSupplierListQuery): Observable<PaginatedResponseOfSupplierModel>;
    get(id: string): Observable<SupplierModel>;
    create(command: CreateSupplierCommand): Observable<string>;
    update(command: UpdateSupplierCommand): Observable<void>;
    delete(id: string): Observable<void>;
    deleteMultiple(ids: string[]): Observable<void>;
    upload(): Observable<number>;
}

@Injectable()
export class SuppliersClient implements ISuppliersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(query: GetSupplierListQuery): Observable<PaginatedResponseOfSupplierModel> {
        let url_ = this.baseUrl + "/api/Suppliers/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfSupplierModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfSupplierModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaginatedResponseOfSupplierModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfSupplierModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: string): Observable<SupplierModel> {
        let url_ = this.baseUrl + "/api/Suppliers/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SupplierModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SupplierModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<SupplierModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SupplierModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateSupplierCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Suppliers/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(command: UpdateSupplierCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Suppliers/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Suppliers/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteMultiple(ids: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Suppliers/DeleteMultiple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMultiple(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMultiple(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteMultiple(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    upload(): Observable<number> {
        let url_ = this.baseUrl + "/api/Suppliers/Upload";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpload(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpload(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processUpload(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IPurchasesClient {
    getAll(query: GetPurchaseListQuery): Observable<PaginatedResponseOfPurchaseModel>;
    get(id: string): Observable<PurchaseModel>;
    create(command: CreatePurchaseCommand): Observable<string>;
    update(command: UpdatePurchaseCommand): Observable<void>;
    delete(id: string): Observable<void>;
    deleteMultiple(ids: string[]): Observable<void>;
    upload(): Observable<number>;
}

@Injectable()
export class PurchasesClient implements IPurchasesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(query: GetPurchaseListQuery): Observable<PaginatedResponseOfPurchaseModel> {
        let url_ = this.baseUrl + "/api/Purchases/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfPurchaseModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfPurchaseModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaginatedResponseOfPurchaseModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfPurchaseModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: string): Observable<PurchaseModel> {
        let url_ = this.baseUrl + "/api/Purchases/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PurchaseModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PurchaseModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<PurchaseModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PurchaseModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreatePurchaseCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Purchases/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(command: UpdatePurchaseCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Purchases/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Purchases/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteMultiple(ids: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Purchases/DeleteMultiple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMultiple(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMultiple(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteMultiple(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    upload(): Observable<number> {
        let url_ = this.baseUrl + "/api/Purchases/Upload";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpload(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpload(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processUpload(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ISalesClient {
    getAll(query: GetSaleListQuery): Observable<PaginatedResponseOfSaleModel>;
    get(id: string): Observable<SaleModel>;
    create(command: CreateSaleCommand): Observable<string>;
    update(command: UpdateSaleCommand): Observable<void>;
    delete(id: string): Observable<void>;
    deleteMultiple(ids: string[]): Observable<void>;
}

@Injectable()
export class SalesClient implements ISalesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(query: GetSaleListQuery): Observable<PaginatedResponseOfSaleModel> {
        let url_ = this.baseUrl + "/api/Sales/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfSaleModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfSaleModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaginatedResponseOfSaleModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfSaleModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: string): Observable<SaleModel> {
        let url_ = this.baseUrl + "/api/Sales/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SaleModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SaleModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<SaleModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SaleModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateSaleCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Sales/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(command: UpdateSaleCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Sales/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Sales/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteMultiple(ids: string[]): Observable<void> {
        let url_ = this.baseUrl + "/api/Sales/DeleteMultiple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(ids);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMultiple(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMultiple(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteMultiple(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface ITreeNodeListsClient {
    getAllPermissionNodeList(allowCache: boolean | null | undefined): Observable<TreeNodeModel[]>;
    getAllAppMenuTreeSelectList(allowCache: boolean | null | undefined): Observable<TreeNodeModel[]>;
}

@Injectable()
export class TreeNodeListsClient implements ITreeNodeListsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAllPermissionNodeList(allowCache: boolean | null | undefined): Observable<TreeNodeModel[]> {
        let url_ = this.baseUrl + "/api/TreeNodeLists/GetAllPermissionNodeList?";
        if (allowCache !== undefined && allowCache !== null)
            url_ += "allowCache=" + encodeURIComponent("" + allowCache) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllPermissionNodeList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllPermissionNodeList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TreeNodeModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TreeNodeModel[]>;
        }));
    }

    protected processGetAllPermissionNodeList(response: HttpResponseBase): Observable<TreeNodeModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TreeNodeModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllAppMenuTreeSelectList(allowCache: boolean | null | undefined): Observable<TreeNodeModel[]> {
        let url_ = this.baseUrl + "/api/TreeNodeLists/GetAllAppMenuTreeSelectList?";
        if (allowCache !== undefined && allowCache !== null)
            url_ += "allowCache=" + encodeURIComponent("" + allowCache) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllAppMenuTreeSelectList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllAppMenuTreeSelectList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TreeNodeModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TreeNodeModel[]>;
        }));
    }

    protected processGetAllAppMenuTreeSelectList(response: HttpResponseBase): Observable<TreeNodeModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TreeNodeModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAppMenusClient {
    getAll(query: GetAppMenuListQuery): Observable<PaginatedResponseOfAppMenuModel>;
    getSidebarMenus(): Observable<SidebarMenuModel[]>;
    get(id: string): Observable<AppMenuModel>;
    create(command: CreateAppMenuCommand): Observable<string>;
    update(command: UpdateAppMenuCommand): Observable<void>;
    delete(id: string): Observable<void>;
}

@Injectable()
export class AppMenusClient implements IAppMenusClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(query: GetAppMenuListQuery): Observable<PaginatedResponseOfAppMenuModel> {
        let url_ = this.baseUrl + "/api/AppMenus/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfAppMenuModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfAppMenuModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaginatedResponseOfAppMenuModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfAppMenuModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getSidebarMenus(): Observable<SidebarMenuModel[]> {
        let url_ = this.baseUrl + "/api/AppMenus/GetSidebarMenus";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSidebarMenus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSidebarMenus(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SidebarMenuModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SidebarMenuModel[]>;
        }));
    }

    protected processGetSidebarMenus(response: HttpResponseBase): Observable<SidebarMenuModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SidebarMenuModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: string): Observable<AppMenuModel> {
        let url_ = this.baseUrl + "/api/AppMenus/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppMenuModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppMenuModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<AppMenuModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppMenuModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateAppMenuCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/AppMenus/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(command: UpdateAppMenuCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/AppMenus/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/AppMenus/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAppNotificationsClient {
    getAll(query: GetAppNotificationListQuery): Observable<PaginatedResponseOfAppNotificationModel>;
    getByUser(): Observable<AppNotificationModel[]>;
}

@Injectable()
export class AppNotificationsClient implements IAppNotificationsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(query: GetAppNotificationListQuery): Observable<PaginatedResponseOfAppNotificationModel> {
        let url_ = this.baseUrl + "/api/AppNotifications/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfAppNotificationModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfAppNotificationModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaginatedResponseOfAppNotificationModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfAppNotificationModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getByUser(): Observable<AppNotificationModel[]> {
        let url_ = this.baseUrl + "/api/AppNotifications/GetByUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetByUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppNotificationModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppNotificationModel[]>;
        }));
    }

    protected processGetByUser(response: HttpResponseBase): Observable<AppNotificationModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AppNotificationModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IAppPagesClient {
    getAll(query: GetAppPageListQuery): Observable<PaginatedResponseOfAppPageModel>;
    get(id: string): Observable<AppPageModel>;
    create(command: CreateAppPageCommand): Observable<string>;
    update(command: UpdateAppPageCommand): Observable<void>;
    upsertAppPage(command: UpsertAppPageCommand): Observable<string>;
}

@Injectable()
export class AppPagesClient implements IAppPagesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(query: GetAppPageListQuery): Observable<PaginatedResponseOfAppPageModel> {
        let url_ = this.baseUrl + "/api/AppPages/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfAppPageModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfAppPageModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaginatedResponseOfAppPageModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfAppPageModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: string): Observable<AppPageModel> {
        let url_ = this.baseUrl + "/api/AppPages/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppPageModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppPageModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<AppPageModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppPageModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateAppPageCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/AppPages/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(command: UpdateAppPageCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/AppPages/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    upsertAppPage(command: UpsertAppPageCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/AppPages/UpsertAppPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpsertAppPage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpsertAppPage(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processUpsertAppPage(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IManageFilesClient {
    upload(): Observable<FileResponse[]>;
    removeFile(removeFileReq: RemoveFileRequest): Observable<FileResponse>;
}

@Injectable()
export class ManageFilesClient implements IManageFilesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    upload(): Observable<FileResponse[]> {
        let url_ = this.baseUrl + "/api/ManageFiles/Upload";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpload(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpload(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse[]>;
        }));
    }

    protected processUpload(response: HttpResponseBase): Observable<FileResponse[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FileResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    removeFile(removeFileReq: RemoveFileRequest): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/ManageFiles/RemoveFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(removeFileReq);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveFile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processRemoveFile(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FileResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("A server side error occurred.", status, _responseText, _headers, result500);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IRolesClient {
    getAll(query: GetRoleListQuery): Observable<PaginatedResponseOfRoleModel>;
    get(id: string): Observable<RoleModel>;
    create(command: CreateRoleCommand): Observable<string>;
    update(command: UpdateRoleCommand): Observable<void>;
    getRolePermissions(id: string): Observable<TreeNodeModel[]>;
}

@Injectable()
export class RolesClient implements IRolesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(query: GetRoleListQuery): Observable<PaginatedResponseOfRoleModel> {
        let url_ = this.baseUrl + "/api/Roles/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfRoleModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfRoleModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaginatedResponseOfRoleModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfRoleModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: string): Observable<RoleModel> {
        let url_ = this.baseUrl + "/api/Roles/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoleModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoleModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<RoleModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoleModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateRoleCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Roles/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(command: UpdateRoleCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Roles/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getRolePermissions(id: string): Observable<TreeNodeModel[]> {
        let url_ = this.baseUrl + "/api/Roles/GetRolePermissions/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRolePermissions(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRolePermissions(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TreeNodeModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TreeNodeModel[]>;
        }));
    }

    protected processGetRolePermissions(response: HttpResponseBase): Observable<TreeNodeModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TreeNodeModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IUsersClient {
    getAll(query: GetAppUserListQuery): Observable<PaginatedResponseOfAppUserModel>;
    get(id: string): Observable<AppUserModel>;
    getProfile(): Observable<AppUserModel>;
    create(command: CreateAppUserCommand): Observable<string>;
    update(command: UpdateAppUserCommand): Observable<void>;
    changePhoto(command: ChangeUserPhotoCommand): Observable<void>;
    updateBasic(command: UpdateAppUserBasicCommand): Observable<void>;
    addToRoles(command: AddToRolesCommand): Observable<void>;
}

@Injectable()
export class UsersClient implements IUsersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAll(query: GetAppUserListQuery): Observable<PaginatedResponseOfAppUserModel> {
        let url_ = this.baseUrl + "/api/Users/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(query);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedResponseOfAppUserModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedResponseOfAppUserModel>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PaginatedResponseOfAppUserModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedResponseOfAppUserModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: string): Observable<AppUserModel> {
        let url_ = this.baseUrl + "/api/Users/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppUserModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppUserModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<AppUserModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppUserModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getProfile(): Observable<AppUserModel> {
        let url_ = this.baseUrl + "/api/Users/GetProfile";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProfile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProfile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppUserModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppUserModel>;
        }));
    }

    protected processGetProfile(response: HttpResponseBase): Observable<AppUserModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppUserModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateAppUserCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Users/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(command: UpdateAppUserCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Users/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    changePhoto(command: ChangeUserPhotoCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Users/ChangePhoto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePhoto(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePhoto(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processChangePhoto(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateBasic(command: UpdateAppUserBasicCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Users/UpdateBasic";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateBasic(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateBasic(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateBasic(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    addToRoles(command: AddToRolesCommand): Observable<void> {
        let url_ = this.baseUrl + "/api/Users/AddToRoles";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            withCredentials: true,
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddToRoles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddToRoles(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAddToRoles(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class PaginatedResponseOfAccountModel implements IPaginatedResponseOfAccountModel {
    items?: AccountModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfAccountModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AccountModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfAccountModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfAccountModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfAccountModel {
    items?: AccountModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };
}

export class AccountModel implements IAccountModel {
    id?: string;
    accountNo?: number;
    name?: string;
    balance?: number;
    note?: string | undefined;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IAccountModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.accountNo = _data["accountNo"];
            this.name = _data["name"];
            this.balance = _data["balance"];
            this.note = _data["note"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): AccountModel {
        data = typeof data === 'object' ? data : {};
        let result = new AccountModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["accountNo"] = this.accountNo;
        data["name"] = this.name;
        data["balance"] = this.balance;
        data["note"] = this.note;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IAccountModel {
    id?: string;
    accountNo?: number;
    name?: string;
    balance?: number;
    note?: string | undefined;
    optionsDataSources?: { [key: string]: any; };
}

export abstract class DataGridModel implements IDataGridModel {
    isInitialLoaded?: boolean;
    allowCache?: boolean | undefined;
    pageNumber?: number;
    pageSize?: number;
    offset?: number;
    sortField?: string;
    sortOrder?: number | undefined;
    defaultOrderFieldName?: string | undefined;
    globalFilterValue?: string;
    globalFilterFields?: GlobalFilterFieldModel[];
    filters?: DataFilterModel[];

    constructor(data?: IDataGridModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isInitialLoaded = _data["isInitialLoaded"];
            this.allowCache = _data["allowCache"];
            this.pageNumber = _data["pageNumber"];
            this.pageSize = _data["pageSize"];
            this.offset = _data["offset"];
            this.sortField = _data["sortField"];
            this.sortOrder = _data["sortOrder"];
            this.defaultOrderFieldName = _data["defaultOrderFieldName"];
            this.globalFilterValue = _data["globalFilterValue"];
            if (Array.isArray(_data["globalFilterFields"])) {
                this.globalFilterFields = [] as any;
                for (let item of _data["globalFilterFields"])
                    this.globalFilterFields!.push(GlobalFilterFieldModel.fromJS(item));
            }
            if (Array.isArray(_data["filters"])) {
                this.filters = [] as any;
                for (let item of _data["filters"])
                    this.filters!.push(DataFilterModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DataGridModel {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'DataGridModel' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isInitialLoaded"] = this.isInitialLoaded;
        data["allowCache"] = this.allowCache;
        data["pageNumber"] = this.pageNumber;
        data["pageSize"] = this.pageSize;
        data["offset"] = this.offset;
        data["sortField"] = this.sortField;
        data["sortOrder"] = this.sortOrder;
        data["defaultOrderFieldName"] = this.defaultOrderFieldName;
        data["globalFilterValue"] = this.globalFilterValue;
        if (Array.isArray(this.globalFilterFields)) {
            data["globalFilterFields"] = [];
            for (let item of this.globalFilterFields)
                data["globalFilterFields"].push(item.toJSON());
        }
        if (Array.isArray(this.filters)) {
            data["filters"] = [];
            for (let item of this.filters)
                data["filters"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDataGridModel {
    isInitialLoaded?: boolean;
    allowCache?: boolean | undefined;
    pageNumber?: number;
    pageSize?: number;
    offset?: number;
    sortField?: string;
    sortOrder?: number | undefined;
    defaultOrderFieldName?: string | undefined;
    globalFilterValue?: string;
    globalFilterFields?: GlobalFilterFieldModel[];
    filters?: DataFilterModel[];
}

export class GetAccountsListQuery extends DataGridModel implements IGetAccountsListQuery {
    cacheKey?: string;

    constructor(data?: IGetAccountsListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cacheKey = _data["cacheKey"];
        }
    }

    static override fromJS(data: any): GetAccountsListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAccountsListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cacheKey"] = this.cacheKey;
        super.toJSON(data);
        return data;
    }
}

export interface IGetAccountsListQuery extends IDataGridModel {
    cacheKey?: string;
}

export class GlobalFilterFieldModel implements IGlobalFilterFieldModel {
    field?: string;
    dbField?: string;
    fieldType?: string;
    matchMode?: string;

    constructor(data?: IGlobalFilterFieldModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.field = _data["field"];
            this.dbField = _data["dbField"];
            this.fieldType = _data["fieldType"];
            this.matchMode = _data["matchMode"];
        }
    }

    static fromJS(data: any): GlobalFilterFieldModel {
        data = typeof data === 'object' ? data : {};
        let result = new GlobalFilterFieldModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["dbField"] = this.dbField;
        data["fieldType"] = this.fieldType;
        data["matchMode"] = this.matchMode;
        return data;
    }
}

export interface IGlobalFilterFieldModel {
    field?: string;
    dbField?: string;
    fieldType?: string;
    matchMode?: string;
}

export class DataFilterModel implements IDataFilterModel {
    field?: string;
    fieldType?: string;
    value?: string;
    filterType?: string;
    matchMode?: string;
    operator?: string;
    dsName?: string;
    dbField?: string;

    constructor(data?: IDataFilterModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.field = _data["field"];
            this.fieldType = _data["fieldType"];
            this.value = _data["value"];
            this.filterType = _data["filterType"];
            this.matchMode = _data["matchMode"];
            this.operator = _data["operator"];
            this.dsName = _data["dsName"];
            this.dbField = _data["dbField"];
        }
    }

    static fromJS(data: any): DataFilterModel {
        data = typeof data === 'object' ? data : {};
        let result = new DataFilterModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["fieldType"] = this.fieldType;
        data["value"] = this.value;
        data["filterType"] = this.filterType;
        data["matchMode"] = this.matchMode;
        data["operator"] = this.operator;
        data["dsName"] = this.dsName;
        data["dbField"] = this.dbField;
        return data;
    }
}

export interface IDataFilterModel {
    field?: string;
    fieldType?: string;
    value?: string;
    filterType?: string;
    matchMode?: string;
    operator?: string;
    dsName?: string;
    dbField?: string;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class CreateAccountCommand implements ICreateAccountCommand {
    accountNo?: number;
    name!: string;
    balance?: number;
    note?: string | undefined;
    cacheKey?: string;

    constructor(data?: ICreateAccountCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accountNo = _data["accountNo"];
            this.name = _data["name"];
            this.balance = _data["balance"];
            this.note = _data["note"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): CreateAccountCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAccountCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountNo"] = this.accountNo;
        data["name"] = this.name;
        data["balance"] = this.balance;
        data["note"] = this.note;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface ICreateAccountCommand {
    accountNo?: number;
    name: string;
    balance?: number;
    note?: string | undefined;
    cacheKey?: string;
}

export class UpdateAccountCommand implements IUpdateAccountCommand {
    id!: string;
    accountNo?: number;
    name!: string;
    balance?: number;
    note?: string | undefined;
    cacheKey?: string;

    constructor(data?: IUpdateAccountCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.accountNo = _data["accountNo"];
            this.name = _data["name"];
            this.balance = _data["balance"];
            this.note = _data["note"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): UpdateAccountCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAccountCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["accountNo"] = this.accountNo;
        data["name"] = this.name;
        data["balance"] = this.balance;
        data["note"] = this.note;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface IUpdateAccountCommand {
    id: string;
    accountNo?: number;
    name: string;
    balance?: number;
    note?: string | undefined;
    cacheKey?: string;
}

export class AuthenticatedResponse implements IAuthenticatedResponse {
    accessToken?: string;
    tokenType?: string;
    expiresInMinutes?: number;
    refreshToken?: string;
    refreshTokenExpiresOn?: Date;

    constructor(data?: IAuthenticatedResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.tokenType = _data["tokenType"];
            this.expiresInMinutes = _data["expiresInMinutes"];
            this.refreshToken = _data["refreshToken"];
            this.refreshTokenExpiresOn = _data["refreshTokenExpiresOn"] ? new Date(_data["refreshTokenExpiresOn"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AuthenticatedResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticatedResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["tokenType"] = this.tokenType;
        data["expiresInMinutes"] = this.expiresInMinutes;
        data["refreshToken"] = this.refreshToken;
        data["refreshTokenExpiresOn"] = this.refreshTokenExpiresOn ? this.refreshTokenExpiresOn.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAuthenticatedResponse {
    accessToken?: string;
    tokenType?: string;
    expiresInMinutes?: number;
    refreshToken?: string;
    refreshTokenExpiresOn?: Date;
}

export class LoginRequestCommand implements ILoginRequestCommand {
    userName?: string;
    password?: string;
    isRemember?: boolean;

    constructor(data?: ILoginRequestCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.isRemember = _data["isRemember"];
        }
    }

    static fromJS(data: any): LoginRequestCommand {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequestCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["isRemember"] = this.isRemember;
        return data;
    }
}

export interface ILoginRequestCommand {
    userName?: string;
    password?: string;
    isRemember?: boolean;
}

export class ChangePasswordCommand implements IChangePasswordCommand {
    currentPassword?: string;
    newPassword?: string;

    constructor(data?: IChangePasswordCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currentPassword = _data["currentPassword"];
            this.newPassword = _data["newPassword"];
        }
    }

    static fromJS(data: any): ChangePasswordCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentPassword"] = this.currentPassword;
        data["newPassword"] = this.newPassword;
        return data;
    }
}

export interface IChangePasswordCommand {
    currentPassword?: string;
    newPassword?: string;
}

export class PaginatedResponseOfMoneyTransferModel implements IPaginatedResponseOfMoneyTransferModel {
    items?: MoneyTransferModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfMoneyTransferModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(MoneyTransferModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfMoneyTransferModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfMoneyTransferModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfMoneyTransferModel {
    items?: MoneyTransferModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };
}

export class MoneyTransferModel implements IMoneyTransferModel {
    id?: string;
    fromAccountId?: string;
    toAccountId?: string;
    amount?: number;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IMoneyTransferModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fromAccountId = _data["fromAccountId"];
            this.toAccountId = _data["toAccountId"];
            this.amount = _data["amount"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): MoneyTransferModel {
        data = typeof data === 'object' ? data : {};
        let result = new MoneyTransferModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fromAccountId"] = this.fromAccountId;
        data["toAccountId"] = this.toAccountId;
        data["amount"] = this.amount;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IMoneyTransferModel {
    id?: string;
    fromAccountId?: string;
    toAccountId?: string;
    amount?: number;
    optionsDataSources?: { [key: string]: any; };
}

export class GetMoneyTransfersListQuery extends DataGridModel implements IGetMoneyTransfersListQuery {
    cacheKey?: string;

    constructor(data?: IGetMoneyTransfersListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cacheKey = _data["cacheKey"];
        }
    }

    static override fromJS(data: any): GetMoneyTransfersListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetMoneyTransfersListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cacheKey"] = this.cacheKey;
        super.toJSON(data);
        return data;
    }
}

export interface IGetMoneyTransfersListQuery extends IDataGridModel {
    cacheKey?: string;
}

export class CreateMoneyTransferCommand implements ICreateMoneyTransferCommand {
    fromAccountId?: string;
    toAccountId?: string;
    amount?: number;
    cacheKey?: string;

    constructor(data?: ICreateMoneyTransferCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fromAccountId = _data["fromAccountId"];
            this.toAccountId = _data["toAccountId"];
            this.amount = _data["amount"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): CreateMoneyTransferCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMoneyTransferCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fromAccountId"] = this.fromAccountId;
        data["toAccountId"] = this.toAccountId;
        data["amount"] = this.amount;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface ICreateMoneyTransferCommand {
    fromAccountId?: string;
    toAccountId?: string;
    amount?: number;
    cacheKey?: string;
}

export class UpdateMoneyTransferCommand implements IUpdateMoneyTransferCommand {
    id!: string;
    fromAccountId?: string;
    toAccountId?: string;
    amount?: number;
    cacheKey?: string;

    constructor(data?: IUpdateMoneyTransferCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fromAccountId = _data["fromAccountId"];
            this.toAccountId = _data["toAccountId"];
            this.amount = _data["amount"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): UpdateMoneyTransferCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateMoneyTransferCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fromAccountId"] = this.fromAccountId;
        data["toAccountId"] = this.toAccountId;
        data["amount"] = this.amount;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface IUpdateMoneyTransferCommand {
    id: string;
    fromAccountId?: string;
    toAccountId?: string;
    amount?: number;
    cacheKey?: string;
}

export class PaginatedResponseOfLookupDetailModel implements IPaginatedResponseOfLookupDetailModel {
    items?: LookupDetailModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfLookupDetailModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(LookupDetailModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfLookupDetailModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfLookupDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfLookupDetailModel {
    items?: LookupDetailModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };
}

export class LookupDetailModel implements ILookupDetailModel {
    id?: string;
    name?: string;
    code?: string;
    description?: string;
    status?: boolean;
    statusName?: string;
    parentId?: string | undefined;
    parentName?: string;
    lookupId?: string | undefined;
    lookupName?: string;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: ILookupDetailModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.statusName = _data["statusName"];
            this.parentId = _data["parentId"];
            this.parentName = _data["parentName"];
            this.lookupId = _data["lookupId"];
            this.lookupName = _data["lookupName"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): LookupDetailModel {
        data = typeof data === 'object' ? data : {};
        let result = new LookupDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["description"] = this.description;
        data["status"] = this.status;
        data["statusName"] = this.statusName;
        data["parentId"] = this.parentId;
        data["parentName"] = this.parentName;
        data["lookupId"] = this.lookupId;
        data["lookupName"] = this.lookupName;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface ILookupDetailModel {
    id?: string;
    name?: string;
    code?: string;
    description?: string;
    status?: boolean;
    statusName?: string;
    parentId?: string | undefined;
    parentName?: string;
    lookupId?: string | undefined;
    lookupName?: string;
    optionsDataSources?: { [key: string]: any; };
}

export class GetLookupDetailListQuery extends DataGridModel implements IGetLookupDetailListQuery {
    cacheKey?: string;

    constructor(data?: IGetLookupDetailListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cacheKey = _data["cacheKey"];
        }
    }

    static override fromJS(data: any): GetLookupDetailListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetLookupDetailListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cacheKey"] = this.cacheKey;
        super.toJSON(data);
        return data;
    }
}

export interface IGetLookupDetailListQuery extends IDataGridModel {
    cacheKey?: string;
}

export class CreateLookupDetailCommand implements ICreateLookupDetailCommand {
    name!: string;
    code!: string;
    description?: string;
    status?: boolean;
    lookupId?: string;
    parentId?: string | undefined;
    cacheKey?: string;

    constructor(data?: ICreateLookupDetailCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.lookupId = _data["lookupId"];
            this.parentId = _data["parentId"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): CreateLookupDetailCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateLookupDetailCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["description"] = this.description;
        data["status"] = this.status;
        data["lookupId"] = this.lookupId;
        data["parentId"] = this.parentId;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface ICreateLookupDetailCommand {
    name: string;
    code: string;
    description?: string;
    status?: boolean;
    lookupId?: string;
    parentId?: string | undefined;
    cacheKey?: string;
}

export class UpdateLookupDetailCommand implements IUpdateLookupDetailCommand {
    id?: string;
    name!: string;
    code!: string;
    description?: string;
    status?: boolean;
    lookupId!: string;
    parentId?: string | undefined;
    cacheKey?: string;

    constructor(data?: IUpdateLookupDetailCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.lookupId = _data["lookupId"];
            this.parentId = _data["parentId"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): UpdateLookupDetailCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateLookupDetailCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["description"] = this.description;
        data["status"] = this.status;
        data["lookupId"] = this.lookupId;
        data["parentId"] = this.parentId;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface IUpdateLookupDetailCommand {
    id?: string;
    name: string;
    code: string;
    description?: string;
    status?: boolean;
    lookupId: string;
    parentId?: string | undefined;
    cacheKey?: string;
}

export class PaginatedResponseOfLookupModel implements IPaginatedResponseOfLookupModel {
    items?: LookupModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfLookupModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(LookupModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfLookupModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfLookupModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfLookupModel {
    items?: LookupModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };
}

export class LookupModel implements ILookupModel {
    id?: string;
    name?: string;
    code?: string;
    description?: string;
    status?: boolean;
    statusName?: string;
    parentId?: string | undefined;
    parentName?: string;
    created?: Date | undefined;
    createdDate?: Date | undefined;
    createdTime?: string | undefined;
    createdYear?: number | undefined;
    subjects?: string[];
    subjectRadio?: string;
    color?: string;
    uploadFile?: string;
    descEdit?: string;
    menus?: string[];
    singleMenu?: string;
    treeSelectMenus?: string[];
    treeSelectSingleMenu?: string;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: ILookupModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.statusName = _data["statusName"];
            this.parentId = _data["parentId"];
            this.parentName = _data["parentName"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
            this.createdTime = _data["createdTime"];
            this.createdYear = _data["createdYear"];
            if (Array.isArray(_data["subjects"])) {
                this.subjects = [] as any;
                for (let item of _data["subjects"])
                    this.subjects!.push(item);
            }
            this.subjectRadio = _data["subjectRadio"];
            this.color = _data["color"];
            this.uploadFile = _data["uploadFile"];
            this.descEdit = _data["descEdit"];
            if (Array.isArray(_data["menus"])) {
                this.menus = [] as any;
                for (let item of _data["menus"])
                    this.menus!.push(item);
            }
            this.singleMenu = _data["singleMenu"];
            if (Array.isArray(_data["treeSelectMenus"])) {
                this.treeSelectMenus = [] as any;
                for (let item of _data["treeSelectMenus"])
                    this.treeSelectMenus!.push(item);
            }
            this.treeSelectSingleMenu = _data["treeSelectSingleMenu"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): LookupModel {
        data = typeof data === 'object' ? data : {};
        let result = new LookupModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["description"] = this.description;
        data["status"] = this.status;
        data["statusName"] = this.statusName;
        data["parentId"] = this.parentId;
        data["parentName"] = this.parentName;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["createdDate"] = this.createdDate ? formatDate(this.createdDate) : <any>undefined;
        data["createdTime"] = this.createdTime;
        data["createdYear"] = this.createdYear;
        if (Array.isArray(this.subjects)) {
            data["subjects"] = [];
            for (let item of this.subjects)
                data["subjects"].push(item);
        }
        data["subjectRadio"] = this.subjectRadio;
        data["color"] = this.color;
        data["uploadFile"] = this.uploadFile;
        data["descEdit"] = this.descEdit;
        if (Array.isArray(this.menus)) {
            data["menus"] = [];
            for (let item of this.menus)
                data["menus"].push(item);
        }
        data["singleMenu"] = this.singleMenu;
        if (Array.isArray(this.treeSelectMenus)) {
            data["treeSelectMenus"] = [];
            for (let item of this.treeSelectMenus)
                data["treeSelectMenus"].push(item);
        }
        data["treeSelectSingleMenu"] = this.treeSelectSingleMenu;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface ILookupModel {
    id?: string;
    name?: string;
    code?: string;
    description?: string;
    status?: boolean;
    statusName?: string;
    parentId?: string | undefined;
    parentName?: string;
    created?: Date | undefined;
    createdDate?: Date | undefined;
    createdTime?: string | undefined;
    createdYear?: number | undefined;
    subjects?: string[];
    subjectRadio?: string;
    color?: string;
    uploadFile?: string;
    descEdit?: string;
    menus?: string[];
    singleMenu?: string;
    treeSelectMenus?: string[];
    treeSelectSingleMenu?: string;
    optionsDataSources?: { [key: string]: any; };
}

export class GetLookupListQuery extends DataGridModel implements IGetLookupListQuery {

    constructor(data?: IGetLookupListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): GetLookupListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetLookupListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IGetLookupListQuery extends IDataGridModel {
}

export class CreateLookupCommand implements ICreateLookupCommand {
    name!: string;
    code!: string;
    description?: string;
    status?: boolean;
    parentId?: string | undefined;

    constructor(data?: ICreateLookupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.parentId = _data["parentId"];
        }
    }

    static fromJS(data: any): CreateLookupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateLookupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        data["description"] = this.description;
        data["status"] = this.status;
        data["parentId"] = this.parentId;
        return data;
    }
}

export interface ICreateLookupCommand {
    name: string;
    code: string;
    description?: string;
    status?: boolean;
    parentId?: string | undefined;
}

export class UpdateLookupCommand implements IUpdateLookupCommand {
    id?: string;
    name!: string;
    code!: string;
    description?: string;
    status?: boolean;
    parentId?: string | undefined;
    cacheKey?: string;

    constructor(data?: IUpdateLookupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.parentId = _data["parentId"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): UpdateLookupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateLookupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["code"] = this.code;
        data["description"] = this.description;
        data["status"] = this.status;
        data["parentId"] = this.parentId;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface IUpdateLookupCommand {
    id?: string;
    name: string;
    code: string;
    description?: string;
    status?: boolean;
    parentId?: string | undefined;
    cacheKey?: string;
}

export class PaginatedResponseOfBrandModel implements IPaginatedResponseOfBrandModel {
    items?: BrandModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfBrandModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(BrandModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfBrandModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfBrandModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfBrandModel {
    items?: BrandModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };
}

export class BrandModel implements IBrandModel {
    id?: string;
    name?: string;
    photoUrl?: string | undefined;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IBrandModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.photoUrl = _data["photoUrl"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): BrandModel {
        data = typeof data === 'object' ? data : {};
        let result = new BrandModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["photoUrl"] = this.photoUrl;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IBrandModel {
    id?: string;
    name?: string;
    photoUrl?: string | undefined;
    optionsDataSources?: { [key: string]: any; };
}

export class GetBrandListQuery extends DataGridModel implements IGetBrandListQuery {
    cacheKey?: string;

    constructor(data?: IGetBrandListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cacheKey = _data["cacheKey"];
        }
    }

    static override fromJS(data: any): GetBrandListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetBrandListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cacheKey"] = this.cacheKey;
        super.toJSON(data);
        return data;
    }
}

export interface IGetBrandListQuery extends IDataGridModel {
    cacheKey?: string;
}

export class CreateBrandCommand implements ICreateBrandCommand {
    name!: string;
    photoUrl?: string | undefined;
    cacheKey?: string;

    constructor(data?: ICreateBrandCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.photoUrl = _data["photoUrl"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): CreateBrandCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBrandCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["photoUrl"] = this.photoUrl;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface ICreateBrandCommand {
    name: string;
    photoUrl?: string | undefined;
    cacheKey?: string;
}

export class UpdateBrandCommand implements IUpdateBrandCommand {
    id?: string;
    name!: string;
    photoUrl?: string | undefined;
    cacheKey?: string;

    constructor(data?: IUpdateBrandCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.photoUrl = _data["photoUrl"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): UpdateBrandCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBrandCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["photoUrl"] = this.photoUrl;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface IUpdateBrandCommand {
    id?: string;
    name: string;
    photoUrl?: string | undefined;
    cacheKey?: string;
}

export class PaginatedResponseOfCategoryModel implements IPaginatedResponseOfCategoryModel {
    items?: CategoryModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfCategoryModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CategoryModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfCategoryModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfCategoryModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfCategoryModel {
    items?: CategoryModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };
}

export class CategoryModel implements ICategoryModel {
    id?: string;
    name?: string;
    description?: string | undefined;
    parentId?: string | undefined;
    parentCategory?: string;
    photoUrl?: string | undefined;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: ICategoryModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.parentId = _data["parentId"];
            this.parentCategory = _data["parentCategory"];
            this.photoUrl = _data["photoUrl"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): CategoryModel {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["parentId"] = this.parentId;
        data["parentCategory"] = this.parentCategory;
        data["photoUrl"] = this.photoUrl;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface ICategoryModel {
    id?: string;
    name?: string;
    description?: string | undefined;
    parentId?: string | undefined;
    parentCategory?: string;
    photoUrl?: string | undefined;
    optionsDataSources?: { [key: string]: any; };
}

export class GetCategoryListQuery extends DataGridModel implements IGetCategoryListQuery {
    cacheKey?: string;

    constructor(data?: IGetCategoryListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cacheKey = _data["cacheKey"];
        }
    }

    static override fromJS(data: any): GetCategoryListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetCategoryListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cacheKey"] = this.cacheKey;
        super.toJSON(data);
        return data;
    }
}

export interface IGetCategoryListQuery extends IDataGridModel {
    cacheKey?: string;
}

export class CreateCategoryCommand implements ICreateCategoryCommand {
    name!: string;
    description?: string;
    photoUrl?: string;
    parentId?: string | undefined;
    cacheKey?: string;

    constructor(data?: ICreateCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.photoUrl = _data["photoUrl"];
            this.parentId = _data["parentId"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): CreateCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["photoUrl"] = this.photoUrl;
        data["parentId"] = this.parentId;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface ICreateCategoryCommand {
    name: string;
    description?: string;
    photoUrl?: string;
    parentId?: string | undefined;
    cacheKey?: string;
}

export class UpdateCategoryCommand implements IUpdateCategoryCommand {
    id?: string;
    name!: string;
    description?: string;
    photoUrl?: string;
    parentId?: string | undefined;
    cacheKey?: string;

    constructor(data?: IUpdateCategoryCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.photoUrl = _data["photoUrl"];
            this.parentId = _data["parentId"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): UpdateCategoryCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCategoryCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["photoUrl"] = this.photoUrl;
        data["parentId"] = this.parentId;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface IUpdateCategoryCommand {
    id?: string;
    name: string;
    description?: string;
    photoUrl?: string;
    parentId?: string | undefined;
    cacheKey?: string;
}

export class PaginatedResponseOfProductModel implements IPaginatedResponseOfProductModel {
    items?: ProductModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfProductModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ProductModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfProductModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfProductModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfProductModel {
    items?: ProductModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };
}

export class ProductModel implements IProductModel {
    id?: string;
    name?: string;
    categoryId?: string;
    productTypeId?: string;
    brandId?: string | undefined;
    code?: string | undefined;
    sku?: string | undefined;
    costPrice?: number | undefined;
    price?: number;
    wholesalePrice?: number | undefined;
    unit?: string | undefined;
    saleUnit?: string | undefined;
    purchaseUnit?: string | undefined;
    alertQuantity?: number | undefined;
    barCodeType?: string | undefined;
    qrCodeType?: string | undefined;
    taxMethod?: TaxMethod;
    taxRate?: number;
    discountType?: DiscountType;
    discount?: number;
    description?: string | undefined;
    isActive?: boolean;
    photoUrls?: string[];
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IProductModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.categoryId = _data["categoryId"];
            this.productTypeId = _data["productTypeId"];
            this.brandId = _data["brandId"];
            this.code = _data["code"];
            this.sku = _data["sku"];
            this.costPrice = _data["costPrice"];
            this.price = _data["price"];
            this.wholesalePrice = _data["wholesalePrice"];
            this.unit = _data["unit"];
            this.saleUnit = _data["saleUnit"];
            this.purchaseUnit = _data["purchaseUnit"];
            this.alertQuantity = _data["alertQuantity"];
            this.barCodeType = _data["barCodeType"];
            this.qrCodeType = _data["qrCodeType"];
            this.taxMethod = _data["taxMethod"];
            this.taxRate = _data["taxRate"];
            this.discountType = _data["discountType"];
            this.discount = _data["discount"];
            this.description = _data["description"];
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["photoUrls"])) {
                this.photoUrls = [] as any;
                for (let item of _data["photoUrls"])
                    this.photoUrls!.push(item);
            }
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): ProductModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProductModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["categoryId"] = this.categoryId;
        data["productTypeId"] = this.productTypeId;
        data["brandId"] = this.brandId;
        data["code"] = this.code;
        data["sku"] = this.sku;
        data["costPrice"] = this.costPrice;
        data["price"] = this.price;
        data["wholesalePrice"] = this.wholesalePrice;
        data["unit"] = this.unit;
        data["saleUnit"] = this.saleUnit;
        data["purchaseUnit"] = this.purchaseUnit;
        data["alertQuantity"] = this.alertQuantity;
        data["barCodeType"] = this.barCodeType;
        data["qrCodeType"] = this.qrCodeType;
        data["taxMethod"] = this.taxMethod;
        data["taxRate"] = this.taxRate;
        data["discountType"] = this.discountType;
        data["discount"] = this.discount;
        data["description"] = this.description;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.photoUrls)) {
            data["photoUrls"] = [];
            for (let item of this.photoUrls)
                data["photoUrls"].push(item);
        }
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IProductModel {
    id?: string;
    name?: string;
    categoryId?: string;
    productTypeId?: string;
    brandId?: string | undefined;
    code?: string | undefined;
    sku?: string | undefined;
    costPrice?: number | undefined;
    price?: number;
    wholesalePrice?: number | undefined;
    unit?: string | undefined;
    saleUnit?: string | undefined;
    purchaseUnit?: string | undefined;
    alertQuantity?: number | undefined;
    barCodeType?: string | undefined;
    qrCodeType?: string | undefined;
    taxMethod?: TaxMethod;
    taxRate?: number;
    discountType?: DiscountType;
    discount?: number;
    description?: string | undefined;
    isActive?: boolean;
    photoUrls?: string[];
    optionsDataSources?: { [key: string]: any; };
}

export enum TaxMethod {
    Exclusive = 1,
    Inclusive = 2,
}

export enum DiscountType {
    Percentage = 1,
    Flat = 2,
}

export class GetProductListQuery extends DataGridModel implements IGetProductListQuery {
    cacheKey?: string;

    constructor(data?: IGetProductListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cacheKey = _data["cacheKey"];
        }
    }

    static override fromJS(data: any): GetProductListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetProductListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cacheKey"] = this.cacheKey;
        super.toJSON(data);
        return data;
    }
}

export interface IGetProductListQuery extends IDataGridModel {
    cacheKey?: string;
}

export class ProductUpsertModel implements IProductUpsertModel {
    name?: string;
    categoryId?: string;
    productTypeId?: string;
    brandId?: string | undefined;
    code?: string | undefined;
    sku?: string | undefined;
    costPrice?: number | undefined;
    price?: number;
    wholesalePrice?: number | undefined;
    unit?: string | undefined;
    saleUnit?: string | undefined;
    purchaseUnit?: string | undefined;
    alertQuantity?: number | undefined;
    barCodeType?: string | undefined;
    qrCodeType?: string | undefined;
    taxMethod?: TaxMethod;
    taxRate?: number;
    discountType?: DiscountType;
    discount?: number;
    description?: string | undefined;
    isActive?: boolean;

    constructor(data?: IProductUpsertModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.categoryId = _data["categoryId"];
            this.productTypeId = _data["productTypeId"];
            this.brandId = _data["brandId"];
            this.code = _data["code"];
            this.sku = _data["sku"];
            this.costPrice = _data["costPrice"];
            this.price = _data["price"];
            this.wholesalePrice = _data["wholesalePrice"];
            this.unit = _data["unit"];
            this.saleUnit = _data["saleUnit"];
            this.purchaseUnit = _data["purchaseUnit"];
            this.alertQuantity = _data["alertQuantity"];
            this.barCodeType = _data["barCodeType"];
            this.qrCodeType = _data["qrCodeType"];
            this.taxMethod = _data["taxMethod"];
            this.taxRate = _data["taxRate"];
            this.discountType = _data["discountType"];
            this.discount = _data["discount"];
            this.description = _data["description"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): ProductUpsertModel {
        data = typeof data === 'object' ? data : {};
        let result = new ProductUpsertModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["categoryId"] = this.categoryId;
        data["productTypeId"] = this.productTypeId;
        data["brandId"] = this.brandId;
        data["code"] = this.code;
        data["sku"] = this.sku;
        data["costPrice"] = this.costPrice;
        data["price"] = this.price;
        data["wholesalePrice"] = this.wholesalePrice;
        data["unit"] = this.unit;
        data["saleUnit"] = this.saleUnit;
        data["purchaseUnit"] = this.purchaseUnit;
        data["alertQuantity"] = this.alertQuantity;
        data["barCodeType"] = this.barCodeType;
        data["qrCodeType"] = this.qrCodeType;
        data["taxMethod"] = this.taxMethod;
        data["taxRate"] = this.taxRate;
        data["discountType"] = this.discountType;
        data["discount"] = this.discount;
        data["description"] = this.description;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IProductUpsertModel {
    name?: string;
    categoryId?: string;
    productTypeId?: string;
    brandId?: string | undefined;
    code?: string | undefined;
    sku?: string | undefined;
    costPrice?: number | undefined;
    price?: number;
    wholesalePrice?: number | undefined;
    unit?: string | undefined;
    saleUnit?: string | undefined;
    purchaseUnit?: string | undefined;
    alertQuantity?: number | undefined;
    barCodeType?: string | undefined;
    qrCodeType?: string | undefined;
    taxMethod?: TaxMethod;
    taxRate?: number;
    discountType?: DiscountType;
    discount?: number;
    description?: string | undefined;
    isActive?: boolean;
}

export class CreateProductCommand extends ProductUpsertModel implements ICreateProductCommand {
    cacheKey?: string;

    constructor(data?: ICreateProductCommand) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cacheKey = _data["cacheKey"];
        }
    }

    static override fromJS(data: any): CreateProductCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateProductCommand();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cacheKey"] = this.cacheKey;
        super.toJSON(data);
        return data;
    }
}

export interface ICreateProductCommand extends IProductUpsertModel {
    cacheKey?: string;
}

export class UpdateProductCommand extends ProductUpsertModel implements IUpdateProductCommand {
    id?: string;
    cacheKey?: string;

    constructor(data?: IUpdateProductCommand) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static override fromJS(data: any): UpdateProductCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateProductCommand();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["cacheKey"] = this.cacheKey;
        super.toJSON(data);
        return data;
    }
}

export interface IUpdateProductCommand extends IProductUpsertModel {
    id?: string;
    cacheKey?: string;
}

export class PaginatedResponseOfUnitModel implements IPaginatedResponseOfUnitModel {
    items?: UnitModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfUnitModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(UnitModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfUnitModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfUnitModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfUnitModel {
    items?: UnitModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };
}

export class UnitModel implements IUnitModel {
    id?: string;
    code?: string;
    name?: string;
    baseUnit?: string;
    operator?: string | undefined;
    operatorValue?: string | undefined;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IUnitModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.code = _data["code"];
            this.name = _data["name"];
            this.baseUnit = _data["baseUnit"];
            this.operator = _data["operator"];
            this.operatorValue = _data["operatorValue"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): UnitModel {
        data = typeof data === 'object' ? data : {};
        let result = new UnitModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["baseUnit"] = this.baseUnit;
        data["operator"] = this.operator;
        data["operatorValue"] = this.operatorValue;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IUnitModel {
    id?: string;
    code?: string;
    name?: string;
    baseUnit?: string;
    operator?: string | undefined;
    operatorValue?: string | undefined;
    optionsDataSources?: { [key: string]: any; };
}

export class GetUnitListQuery extends DataGridModel implements IGetUnitListQuery {
    cacheKey?: string;

    constructor(data?: IGetUnitListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cacheKey = _data["cacheKey"];
        }
    }

    static override fromJS(data: any): GetUnitListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetUnitListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cacheKey"] = this.cacheKey;
        super.toJSON(data);
        return data;
    }
}

export interface IGetUnitListQuery extends IDataGridModel {
    cacheKey?: string;
}

export class CreateUnitCommand implements ICreateUnitCommand {
    name!: string;
    photoUrl?: string | undefined;
    cacheKey?: string;

    constructor(data?: ICreateUnitCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.photoUrl = _data["photoUrl"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): CreateUnitCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUnitCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["photoUrl"] = this.photoUrl;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface ICreateUnitCommand {
    name: string;
    photoUrl?: string | undefined;
    cacheKey?: string;
}

export class UpdateUnitCommand implements IUpdateUnitCommand {
    id?: string;
    name!: string;
    photoUrl?: string | undefined;
    cacheKey?: string;

    constructor(data?: IUpdateUnitCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.photoUrl = _data["photoUrl"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): UpdateUnitCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUnitCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["photoUrl"] = this.photoUrl;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface IUpdateUnitCommand {
    id?: string;
    name: string;
    photoUrl?: string | undefined;
    cacheKey?: string;
}

export class PaginatedResponseOfWarehouseModel implements IPaginatedResponseOfWarehouseModel {
    items?: WarehouseModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfWarehouseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(WarehouseModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfWarehouseModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfWarehouseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfWarehouseModel {
    items?: WarehouseModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };
}

export class WarehouseModel implements IWarehouseModel {
    id?: string;
    name?: string;
    email?: string | undefined;
    phoneNo?: string | undefined;
    mobile?: string | undefined;
    countryId?: string | undefined;
    countryName?: string | undefined;
    city?: string | undefined;
    address?: string | undefined;
    isActive?: boolean;
    active?: string;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IWarehouseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.phoneNo = _data["phoneNo"];
            this.mobile = _data["mobile"];
            this.countryId = _data["countryId"];
            this.countryName = _data["countryName"];
            this.city = _data["city"];
            this.address = _data["address"];
            this.isActive = _data["isActive"];
            this.active = _data["active"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): WarehouseModel {
        data = typeof data === 'object' ? data : {};
        let result = new WarehouseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["phoneNo"] = this.phoneNo;
        data["mobile"] = this.mobile;
        data["countryId"] = this.countryId;
        data["countryName"] = this.countryName;
        data["city"] = this.city;
        data["address"] = this.address;
        data["isActive"] = this.isActive;
        data["active"] = this.active;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IWarehouseModel {
    id?: string;
    name?: string;
    email?: string | undefined;
    phoneNo?: string | undefined;
    mobile?: string | undefined;
    countryId?: string | undefined;
    countryName?: string | undefined;
    city?: string | undefined;
    address?: string | undefined;
    isActive?: boolean;
    active?: string;
    optionsDataSources?: { [key: string]: any; };
}

export class GetWarehouseListQuery extends DataGridModel implements IGetWarehouseListQuery {
    cacheKey?: string;

    constructor(data?: IGetWarehouseListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cacheKey = _data["cacheKey"];
        }
    }

    static override fromJS(data: any): GetWarehouseListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetWarehouseListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cacheKey"] = this.cacheKey;
        super.toJSON(data);
        return data;
    }
}

export interface IGetWarehouseListQuery extends IDataGridModel {
    cacheKey?: string;
}

export class CreateWarehouseCommand implements ICreateWarehouseCommand {
    name!: string;
    email?: string | undefined;
    phoneNo?: string | undefined;
    mobile?: string | undefined;
    countryId?: string | undefined;
    city?: string | undefined;
    address?: string | undefined;
    cacheKey?: string;

    constructor(data?: ICreateWarehouseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.phoneNo = _data["phoneNo"];
            this.mobile = _data["mobile"];
            this.countryId = _data["countryId"];
            this.city = _data["city"];
            this.address = _data["address"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): CreateWarehouseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateWarehouseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["phoneNo"] = this.phoneNo;
        data["mobile"] = this.mobile;
        data["countryId"] = this.countryId;
        data["city"] = this.city;
        data["address"] = this.address;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface ICreateWarehouseCommand {
    name: string;
    email?: string | undefined;
    phoneNo?: string | undefined;
    mobile?: string | undefined;
    countryId?: string | undefined;
    city?: string | undefined;
    address?: string | undefined;
    cacheKey?: string;
}

export class UpdateWarehouseCommand implements IUpdateWarehouseCommand {
    id?: string;
    name!: string;
    email?: string | undefined;
    phoneNo?: string | undefined;
    mobile?: string | undefined;
    countryId?: string | undefined;
    city?: string | undefined;
    address?: string | undefined;
    isActive?: boolean;
    cacheKey?: string;

    constructor(data?: IUpdateWarehouseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.phoneNo = _data["phoneNo"];
            this.mobile = _data["mobile"];
            this.countryId = _data["countryId"];
            this.city = _data["city"];
            this.address = _data["address"];
            this.isActive = _data["isActive"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): UpdateWarehouseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateWarehouseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["phoneNo"] = this.phoneNo;
        data["mobile"] = this.mobile;
        data["countryId"] = this.countryId;
        data["city"] = this.city;
        data["address"] = this.address;
        data["isActive"] = this.isActive;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface IUpdateWarehouseCommand {
    id?: string;
    name: string;
    email?: string | undefined;
    phoneNo?: string | undefined;
    mobile?: string | undefined;
    countryId?: string | undefined;
    city?: string | undefined;
    address?: string | undefined;
    isActive?: boolean;
    cacheKey?: string;
}

export class SelectListModel implements ISelectListModel {
    id?: any;
    name?: string;
    isDefault?: boolean;
    severity?: string;

    constructor(data?: ISelectListModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.isDefault = _data["isDefault"];
            this.severity = _data["severity"];
        }
    }

    static fromJS(data: any): SelectListModel {
        data = typeof data === 'object' ? data : {};
        let result = new SelectListModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["isDefault"] = this.isDefault;
        data["severity"] = this.severity;
        return data;
    }
}

export interface ISelectListModel {
    id?: any;
    name?: string;
    isDefault?: boolean;
    severity?: string;
}

export class PaginatedResponseOfCustomerGroupModel implements IPaginatedResponseOfCustomerGroupModel {
    items?: CustomerGroupModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfCustomerGroupModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CustomerGroupModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfCustomerGroupModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfCustomerGroupModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfCustomerGroupModel {
    items?: CustomerGroupModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };
}

export class CustomerGroupModel implements ICustomerGroupModel {
    id?: string;
    name?: string;
    rate?: number;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: ICustomerGroupModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.rate = _data["rate"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): CustomerGroupModel {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerGroupModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["rate"] = this.rate;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface ICustomerGroupModel {
    id?: string;
    name?: string;
    rate?: number;
    optionsDataSources?: { [key: string]: any; };
}

export class GetCustomerGroupListQuery extends DataGridModel implements IGetCustomerGroupListQuery {
    cacheKey?: string;

    constructor(data?: IGetCustomerGroupListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cacheKey = _data["cacheKey"];
        }
    }

    static override fromJS(data: any): GetCustomerGroupListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetCustomerGroupListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cacheKey"] = this.cacheKey;
        super.toJSON(data);
        return data;
    }
}

export interface IGetCustomerGroupListQuery extends IDataGridModel {
    cacheKey?: string;
}

export class CreateCustomerGroupCommand implements ICreateCustomerGroupCommand {
    name!: string;
    rate?: number;
    cacheKey?: string;

    constructor(data?: ICreateCustomerGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.rate = _data["rate"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): CreateCustomerGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCustomerGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["rate"] = this.rate;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface ICreateCustomerGroupCommand {
    name: string;
    rate?: number;
    cacheKey?: string;
}

export class UpdateCustomerGroupCommand implements IUpdateCustomerGroupCommand {
    id?: string;
    name!: string;
    rate?: number;
    cacheKey?: string;

    constructor(data?: IUpdateCustomerGroupCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.rate = _data["rate"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): UpdateCustomerGroupCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCustomerGroupCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["rate"] = this.rate;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface IUpdateCustomerGroupCommand {
    id?: string;
    name: string;
    rate?: number;
    cacheKey?: string;
}

export class PaginatedResponseOfCustomerModel implements IPaginatedResponseOfCustomerModel {
    items?: CustomerModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfCustomerModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CustomerModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfCustomerModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfCustomerModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfCustomerModel {
    items?: CustomerModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };
}

export class CustomerModel implements ICustomerModel {
    id?: string;
    name?: string;
    email?: string | undefined;
    phoneNo?: string;
    mobile?: string | undefined;
    countryId?: string | undefined;
    countryName?: string | undefined;
    city?: string | undefined;
    address?: string | undefined;
    previousDue?: number | undefined;
    isActive?: boolean;
    active?: string;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: ICustomerModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.phoneNo = _data["phoneNo"];
            this.mobile = _data["mobile"];
            this.countryId = _data["countryId"];
            this.countryName = _data["countryName"];
            this.city = _data["city"];
            this.address = _data["address"];
            this.previousDue = _data["previousDue"];
            this.isActive = _data["isActive"];
            this.active = _data["active"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): CustomerModel {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["phoneNo"] = this.phoneNo;
        data["mobile"] = this.mobile;
        data["countryId"] = this.countryId;
        data["countryName"] = this.countryName;
        data["city"] = this.city;
        data["address"] = this.address;
        data["previousDue"] = this.previousDue;
        data["isActive"] = this.isActive;
        data["active"] = this.active;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface ICustomerModel {
    id?: string;
    name?: string;
    email?: string | undefined;
    phoneNo?: string;
    mobile?: string | undefined;
    countryId?: string | undefined;
    countryName?: string | undefined;
    city?: string | undefined;
    address?: string | undefined;
    previousDue?: number | undefined;
    isActive?: boolean;
    active?: string;
    optionsDataSources?: { [key: string]: any; };
}

export class GetCustomerListQuery extends DataGridModel implements IGetCustomerListQuery {
    cacheKey?: string;

    constructor(data?: IGetCustomerListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cacheKey = _data["cacheKey"];
        }
    }

    static override fromJS(data: any): GetCustomerListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetCustomerListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cacheKey"] = this.cacheKey;
        super.toJSON(data);
        return data;
    }
}

export interface IGetCustomerListQuery extends IDataGridModel {
    cacheKey?: string;
}

export class CreateCustomerCommand implements ICreateCustomerCommand {
    name!: string;
    email?: string | undefined;
    phoneNo?: string | undefined;
    mobile?: string | undefined;
    countryId?: string | undefined;
    city?: string | undefined;
    address?: string | undefined;
    isActive?: boolean;
    cacheKey?: string;

    constructor(data?: ICreateCustomerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.phoneNo = _data["phoneNo"];
            this.mobile = _data["mobile"];
            this.countryId = _data["countryId"];
            this.city = _data["city"];
            this.address = _data["address"];
            this.isActive = _data["isActive"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): CreateCustomerCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCustomerCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["phoneNo"] = this.phoneNo;
        data["mobile"] = this.mobile;
        data["countryId"] = this.countryId;
        data["city"] = this.city;
        data["address"] = this.address;
        data["isActive"] = this.isActive;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface ICreateCustomerCommand {
    name: string;
    email?: string | undefined;
    phoneNo?: string | undefined;
    mobile?: string | undefined;
    countryId?: string | undefined;
    city?: string | undefined;
    address?: string | undefined;
    isActive?: boolean;
    cacheKey?: string;
}

export class UpdateCustomerCommand implements IUpdateCustomerCommand {
    id?: string;
    name!: string;
    email?: string | undefined;
    phoneNo?: string | undefined;
    mobile?: string | undefined;
    countryId?: string | undefined;
    city?: string | undefined;
    address?: string | undefined;
    isActive?: boolean;
    cacheKey?: string;

    constructor(data?: IUpdateCustomerCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.phoneNo = _data["phoneNo"];
            this.mobile = _data["mobile"];
            this.countryId = _data["countryId"];
            this.city = _data["city"];
            this.address = _data["address"];
            this.isActive = _data["isActive"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): UpdateCustomerCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCustomerCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["phoneNo"] = this.phoneNo;
        data["mobile"] = this.mobile;
        data["countryId"] = this.countryId;
        data["city"] = this.city;
        data["address"] = this.address;
        data["isActive"] = this.isActive;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface IUpdateCustomerCommand {
    id?: string;
    name: string;
    email?: string | undefined;
    phoneNo?: string | undefined;
    mobile?: string | undefined;
    countryId?: string | undefined;
    city?: string | undefined;
    address?: string | undefined;
    isActive?: boolean;
    cacheKey?: string;
}

export class PaginatedResponseOfSupplierModel implements IPaginatedResponseOfSupplierModel {
    items?: SupplierModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfSupplierModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(SupplierModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfSupplierModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfSupplierModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfSupplierModel {
    items?: SupplierModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };
}

export class SupplierModel implements ISupplierModel {
    id?: string;
    name?: string;
    email?: string | undefined;
    phoneNo?: string;
    mobile?: string | undefined;
    countryId?: string | undefined;
    countryName?: string;
    city?: string | undefined;
    address?: string | undefined;
    openingBalance?: number | undefined;
    isActive?: boolean;
    active?: string;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: ISupplierModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.phoneNo = _data["phoneNo"];
            this.mobile = _data["mobile"];
            this.countryId = _data["countryId"];
            this.countryName = _data["countryName"];
            this.city = _data["city"];
            this.address = _data["address"];
            this.openingBalance = _data["openingBalance"];
            this.isActive = _data["isActive"];
            this.active = _data["active"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): SupplierModel {
        data = typeof data === 'object' ? data : {};
        let result = new SupplierModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["phoneNo"] = this.phoneNo;
        data["mobile"] = this.mobile;
        data["countryId"] = this.countryId;
        data["countryName"] = this.countryName;
        data["city"] = this.city;
        data["address"] = this.address;
        data["openingBalance"] = this.openingBalance;
        data["isActive"] = this.isActive;
        data["active"] = this.active;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface ISupplierModel {
    id?: string;
    name?: string;
    email?: string | undefined;
    phoneNo?: string;
    mobile?: string | undefined;
    countryId?: string | undefined;
    countryName?: string;
    city?: string | undefined;
    address?: string | undefined;
    openingBalance?: number | undefined;
    isActive?: boolean;
    active?: string;
    optionsDataSources?: { [key: string]: any; };
}

export class GetSupplierListQuery extends DataGridModel implements IGetSupplierListQuery {
    cacheKey?: string;

    constructor(data?: IGetSupplierListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cacheKey = _data["cacheKey"];
        }
    }

    static override fromJS(data: any): GetSupplierListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetSupplierListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cacheKey"] = this.cacheKey;
        super.toJSON(data);
        return data;
    }
}

export interface IGetSupplierListQuery extends IDataGridModel {
    cacheKey?: string;
}

export class CreateSupplierCommand implements ICreateSupplierCommand {
    name!: string;
    email?: string | undefined;
    phoneNo?: string | undefined;
    mobile?: string | undefined;
    countryId?: string | undefined;
    city?: string | undefined;
    address?: string | undefined;
    isActive?: boolean;
    cacheKey?: string;

    constructor(data?: ICreateSupplierCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.phoneNo = _data["phoneNo"];
            this.mobile = _data["mobile"];
            this.countryId = _data["countryId"];
            this.city = _data["city"];
            this.address = _data["address"];
            this.isActive = _data["isActive"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): CreateSupplierCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSupplierCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["phoneNo"] = this.phoneNo;
        data["mobile"] = this.mobile;
        data["countryId"] = this.countryId;
        data["city"] = this.city;
        data["address"] = this.address;
        data["isActive"] = this.isActive;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface ICreateSupplierCommand {
    name: string;
    email?: string | undefined;
    phoneNo?: string | undefined;
    mobile?: string | undefined;
    countryId?: string | undefined;
    city?: string | undefined;
    address?: string | undefined;
    isActive?: boolean;
    cacheKey?: string;
}

export class UpdateSupplierCommand implements IUpdateSupplierCommand {
    id?: string;
    name!: string;
    email?: string | undefined;
    phoneNo?: string | undefined;
    mobile?: string | undefined;
    countryId?: string | undefined;
    city?: string | undefined;
    address?: string | undefined;
    isActive?: boolean;
    cacheKey?: string;

    constructor(data?: IUpdateSupplierCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.phoneNo = _data["phoneNo"];
            this.mobile = _data["mobile"];
            this.countryId = _data["countryId"];
            this.city = _data["city"];
            this.address = _data["address"];
            this.isActive = _data["isActive"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): UpdateSupplierCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSupplierCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["phoneNo"] = this.phoneNo;
        data["mobile"] = this.mobile;
        data["countryId"] = this.countryId;
        data["city"] = this.city;
        data["address"] = this.address;
        data["isActive"] = this.isActive;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface IUpdateSupplierCommand {
    id?: string;
    name: string;
    email?: string | undefined;
    phoneNo?: string | undefined;
    mobile?: string | undefined;
    countryId?: string | undefined;
    city?: string | undefined;
    address?: string | undefined;
    isActive?: boolean;
    cacheKey?: string;
}

export class PaginatedResponseOfPurchaseModel implements IPaginatedResponseOfPurchaseModel {
    items?: PurchaseModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfPurchaseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PurchaseModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfPurchaseModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfPurchaseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfPurchaseModel {
    items?: PurchaseModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };
}

export class PurchaseModel implements IPurchaseModel {
    id?: string;
    purchaseDate?: Date;
    referenceNo?: string;
    warehouseId?: string;
    supplierId?: string;
    purchaseStatusId?: string;
    attachmentUrl?: string | undefined;
    orderTax?: number | undefined;
    discount?: number | undefined;
    shippingCost?: number | undefined;
    note?: string | undefined;
    purchaseDetails?: PurchaseDetailModel[];
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPurchaseModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.purchaseDate = _data["purchaseDate"] ? new Date(_data["purchaseDate"].toString()) : <any>undefined;
            this.referenceNo = _data["referenceNo"];
            this.warehouseId = _data["warehouseId"];
            this.supplierId = _data["supplierId"];
            this.purchaseStatusId = _data["purchaseStatusId"];
            this.attachmentUrl = _data["attachmentUrl"];
            this.orderTax = _data["orderTax"];
            this.discount = _data["discount"];
            this.shippingCost = _data["shippingCost"];
            this.note = _data["note"];
            if (Array.isArray(_data["purchaseDetails"])) {
                this.purchaseDetails = [] as any;
                for (let item of _data["purchaseDetails"])
                    this.purchaseDetails!.push(PurchaseDetailModel.fromJS(item));
            }
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PurchaseModel {
        data = typeof data === 'object' ? data : {};
        let result = new PurchaseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["purchaseDate"] = this.purchaseDate ? formatDate(this.purchaseDate) : <any>undefined;
        data["referenceNo"] = this.referenceNo;
        data["warehouseId"] = this.warehouseId;
        data["supplierId"] = this.supplierId;
        data["purchaseStatusId"] = this.purchaseStatusId;
        data["attachmentUrl"] = this.attachmentUrl;
        data["orderTax"] = this.orderTax;
        data["discount"] = this.discount;
        data["shippingCost"] = this.shippingCost;
        data["note"] = this.note;
        if (Array.isArray(this.purchaseDetails)) {
            data["purchaseDetails"] = [];
            for (let item of this.purchaseDetails)
                data["purchaseDetails"].push(item.toJSON());
        }
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPurchaseModel {
    id?: string;
    purchaseDate?: Date;
    referenceNo?: string;
    warehouseId?: string;
    supplierId?: string;
    purchaseStatusId?: string;
    attachmentUrl?: string | undefined;
    orderTax?: number | undefined;
    discount?: number | undefined;
    shippingCost?: number | undefined;
    note?: string | undefined;
    purchaseDetails?: PurchaseDetailModel[];
    optionsDataSources?: { [key: string]: any; };
}

export class PurchaseDetailModel implements IPurchaseDetailModel {
    id?: string;
    purchaseId?: string;
    productId?: string;
    quantity?: number;
    batchNo?: string;
    expiredDate?: Date | undefined;
    netUnitCost?: number;
    decimal?: number;
    tax?: number;
    subTotal?: number;

    constructor(data?: IPurchaseDetailModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.purchaseId = _data["purchaseId"];
            this.productId = _data["productId"];
            this.quantity = _data["quantity"];
            this.batchNo = _data["batchNo"];
            this.expiredDate = _data["expiredDate"] ? new Date(_data["expiredDate"].toString()) : <any>undefined;
            this.netUnitCost = _data["netUnitCost"];
            this.decimal = _data["decimal"];
            this.tax = _data["tax"];
            this.subTotal = _data["subTotal"];
        }
    }

    static fromJS(data: any): PurchaseDetailModel {
        data = typeof data === 'object' ? data : {};
        let result = new PurchaseDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["purchaseId"] = this.purchaseId;
        data["productId"] = this.productId;
        data["quantity"] = this.quantity;
        data["batchNo"] = this.batchNo;
        data["expiredDate"] = this.expiredDate ? formatDate(this.expiredDate) : <any>undefined;
        data["netUnitCost"] = this.netUnitCost;
        data["decimal"] = this.decimal;
        data["tax"] = this.tax;
        data["subTotal"] = this.subTotal;
        return data;
    }
}

export interface IPurchaseDetailModel {
    id?: string;
    purchaseId?: string;
    productId?: string;
    quantity?: number;
    batchNo?: string;
    expiredDate?: Date | undefined;
    netUnitCost?: number;
    decimal?: number;
    tax?: number;
    subTotal?: number;
}

export class GetPurchaseListQuery extends DataGridModel implements IGetPurchaseListQuery {
    cacheKey?: string;

    constructor(data?: IGetPurchaseListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cacheKey = _data["cacheKey"];
        }
    }

    static override fromJS(data: any): GetPurchaseListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetPurchaseListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cacheKey"] = this.cacheKey;
        super.toJSON(data);
        return data;
    }
}

export interface IGetPurchaseListQuery extends IDataGridModel {
    cacheKey?: string;
}

export class CreatePurchaseCommand implements ICreatePurchaseCommand {
    purchaseDate?: Date;
    referenceNo?: string;
    warehouseId?: string;
    supplierId?: string;
    purchaseStatusId?: string;
    attachmentUrl?: string | undefined;
    orderTax?: number | undefined;
    discount?: number | undefined;
    shippingCost?: number | undefined;
    note?: string | undefined;
    purchaseDetails?: PurchaseDetailModel[];
    cacheKey?: string;

    constructor(data?: ICreatePurchaseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.purchaseDate = _data["purchaseDate"] ? new Date(_data["purchaseDate"].toString()) : <any>undefined;
            this.referenceNo = _data["referenceNo"];
            this.warehouseId = _data["warehouseId"];
            this.supplierId = _data["supplierId"];
            this.purchaseStatusId = _data["purchaseStatusId"];
            this.attachmentUrl = _data["attachmentUrl"];
            this.orderTax = _data["orderTax"];
            this.discount = _data["discount"];
            this.shippingCost = _data["shippingCost"];
            this.note = _data["note"];
            if (Array.isArray(_data["purchaseDetails"])) {
                this.purchaseDetails = [] as any;
                for (let item of _data["purchaseDetails"])
                    this.purchaseDetails!.push(PurchaseDetailModel.fromJS(item));
            }
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): CreatePurchaseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePurchaseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["purchaseDate"] = this.purchaseDate ? formatDate(this.purchaseDate) : <any>undefined;
        data["referenceNo"] = this.referenceNo;
        data["warehouseId"] = this.warehouseId;
        data["supplierId"] = this.supplierId;
        data["purchaseStatusId"] = this.purchaseStatusId;
        data["attachmentUrl"] = this.attachmentUrl;
        data["orderTax"] = this.orderTax;
        data["discount"] = this.discount;
        data["shippingCost"] = this.shippingCost;
        data["note"] = this.note;
        if (Array.isArray(this.purchaseDetails)) {
            data["purchaseDetails"] = [];
            for (let item of this.purchaseDetails)
                data["purchaseDetails"].push(item.toJSON());
        }
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface ICreatePurchaseCommand {
    purchaseDate?: Date;
    referenceNo?: string;
    warehouseId?: string;
    supplierId?: string;
    purchaseStatusId?: string;
    attachmentUrl?: string | undefined;
    orderTax?: number | undefined;
    discount?: number | undefined;
    shippingCost?: number | undefined;
    note?: string | undefined;
    purchaseDetails?: PurchaseDetailModel[];
    cacheKey?: string;
}

export class UpdatePurchaseCommand implements IUpdatePurchaseCommand {
    id?: string;
    purchaseDate?: Date;
    referenceNo?: string;
    warehouseId?: string;
    supplierId?: string;
    purchaseStatusId?: string;
    attachmentUrl?: string | undefined;
    orderTax?: number | undefined;
    discount?: number | undefined;
    shippingCost?: number | undefined;
    note?: string | undefined;
    purchaseDetails?: PurchaseDetailModel[];
    cacheKey?: string;

    constructor(data?: IUpdatePurchaseCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.purchaseDate = _data["purchaseDate"] ? new Date(_data["purchaseDate"].toString()) : <any>undefined;
            this.referenceNo = _data["referenceNo"];
            this.warehouseId = _data["warehouseId"];
            this.supplierId = _data["supplierId"];
            this.purchaseStatusId = _data["purchaseStatusId"];
            this.attachmentUrl = _data["attachmentUrl"];
            this.orderTax = _data["orderTax"];
            this.discount = _data["discount"];
            this.shippingCost = _data["shippingCost"];
            this.note = _data["note"];
            if (Array.isArray(_data["purchaseDetails"])) {
                this.purchaseDetails = [] as any;
                for (let item of _data["purchaseDetails"])
                    this.purchaseDetails!.push(PurchaseDetailModel.fromJS(item));
            }
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): UpdatePurchaseCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePurchaseCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["purchaseDate"] = this.purchaseDate ? formatDate(this.purchaseDate) : <any>undefined;
        data["referenceNo"] = this.referenceNo;
        data["warehouseId"] = this.warehouseId;
        data["supplierId"] = this.supplierId;
        data["purchaseStatusId"] = this.purchaseStatusId;
        data["attachmentUrl"] = this.attachmentUrl;
        data["orderTax"] = this.orderTax;
        data["discount"] = this.discount;
        data["shippingCost"] = this.shippingCost;
        data["note"] = this.note;
        if (Array.isArray(this.purchaseDetails)) {
            data["purchaseDetails"] = [];
            for (let item of this.purchaseDetails)
                data["purchaseDetails"].push(item.toJSON());
        }
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface IUpdatePurchaseCommand {
    id?: string;
    purchaseDate?: Date;
    referenceNo?: string;
    warehouseId?: string;
    supplierId?: string;
    purchaseStatusId?: string;
    attachmentUrl?: string | undefined;
    orderTax?: number | undefined;
    discount?: number | undefined;
    shippingCost?: number | undefined;
    note?: string | undefined;
    purchaseDetails?: PurchaseDetailModel[];
    cacheKey?: string;
}

export class PaginatedResponseOfSaleModel implements IPaginatedResponseOfSaleModel {
    items?: SaleModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfSaleModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(SaleModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfSaleModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfSaleModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfSaleModel {
    items?: SaleModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };
}

export class SaleModel implements ISaleModel {
    id?: string;
    saleDate?: Date;
    referenceNo?: string;
    warehouseId?: string;
    customerId?: string;
    bullerId?: string;
    attachmentUrl?: string | undefined;
    orderTax?: number | undefined;
    orderDiscountTypeId?: string;
    discount?: number | undefined;
    shippingCost?: number | undefined;
    saleStatusId?: string;
    paymentStatusId?: string;
    saleNote?: string | undefined;
    staffNote?: string | undefined;
    saleDetails?: SaleDetail[];
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: ISaleModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.saleDate = _data["saleDate"] ? new Date(_data["saleDate"].toString()) : <any>undefined;
            this.referenceNo = _data["referenceNo"];
            this.warehouseId = _data["warehouseId"];
            this.customerId = _data["customerId"];
            this.bullerId = _data["bullerId"];
            this.attachmentUrl = _data["attachmentUrl"];
            this.orderTax = _data["orderTax"];
            this.orderDiscountTypeId = _data["orderDiscountTypeId"];
            this.discount = _data["discount"];
            this.shippingCost = _data["shippingCost"];
            this.saleStatusId = _data["saleStatusId"];
            this.paymentStatusId = _data["paymentStatusId"];
            this.saleNote = _data["saleNote"];
            this.staffNote = _data["staffNote"];
            if (Array.isArray(_data["saleDetails"])) {
                this.saleDetails = [] as any;
                for (let item of _data["saleDetails"])
                    this.saleDetails!.push(SaleDetail.fromJS(item));
            }
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): SaleModel {
        data = typeof data === 'object' ? data : {};
        let result = new SaleModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["saleDate"] = this.saleDate ? formatDate(this.saleDate) : <any>undefined;
        data["referenceNo"] = this.referenceNo;
        data["warehouseId"] = this.warehouseId;
        data["customerId"] = this.customerId;
        data["bullerId"] = this.bullerId;
        data["attachmentUrl"] = this.attachmentUrl;
        data["orderTax"] = this.orderTax;
        data["orderDiscountTypeId"] = this.orderDiscountTypeId;
        data["discount"] = this.discount;
        data["shippingCost"] = this.shippingCost;
        data["saleStatusId"] = this.saleStatusId;
        data["paymentStatusId"] = this.paymentStatusId;
        data["saleNote"] = this.saleNote;
        data["staffNote"] = this.staffNote;
        if (Array.isArray(this.saleDetails)) {
            data["saleDetails"] = [];
            for (let item of this.saleDetails)
                data["saleDetails"].push(item.toJSON());
        }
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface ISaleModel {
    id?: string;
    saleDate?: Date;
    referenceNo?: string;
    warehouseId?: string;
    customerId?: string;
    bullerId?: string;
    attachmentUrl?: string | undefined;
    orderTax?: number | undefined;
    orderDiscountTypeId?: string;
    discount?: number | undefined;
    shippingCost?: number | undefined;
    saleStatusId?: string;
    paymentStatusId?: string;
    saleNote?: string | undefined;
    staffNote?: string | undefined;
    saleDetails?: SaleDetail[];
    optionsDataSources?: { [key: string]: any; };
}

export abstract class BaseEntity implements IBaseEntity {
    id?: string;
    domainEvents?: BaseEvent[];

    constructor(data?: IBaseEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["domainEvents"])) {
                this.domainEvents = [] as any;
                for (let item of _data["domainEvents"])
                    this.domainEvents!.push(BaseEvent.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BaseEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.domainEvents)) {
            data["domainEvents"] = [];
            for (let item of this.domainEvents)
                data["domainEvents"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBaseEntity {
    id?: string;
    domainEvents?: BaseEvent[];
}

export class SaleDetail extends BaseEntity implements ISaleDetail {
    saleId?: string;
    productId?: string;
    quantity?: number;
    batchNo?: string;
    expiredDate?: Date | undefined;
    netUnitCost?: number;
    decimal?: number;
    tax?: number;
    subTotal?: number;
    sale?: Sale;

    constructor(data?: ISaleDetail) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.saleId = _data["saleId"];
            this.productId = _data["productId"];
            this.quantity = _data["quantity"];
            this.batchNo = _data["batchNo"];
            this.expiredDate = _data["expiredDate"] ? new Date(_data["expiredDate"].toString()) : <any>undefined;
            this.netUnitCost = _data["netUnitCost"];
            this.decimal = _data["decimal"];
            this.tax = _data["tax"];
            this.subTotal = _data["subTotal"];
            this.sale = _data["sale"] ? Sale.fromJS(_data["sale"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): SaleDetail {
        data = typeof data === 'object' ? data : {};
        let result = new SaleDetail();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saleId"] = this.saleId;
        data["productId"] = this.productId;
        data["quantity"] = this.quantity;
        data["batchNo"] = this.batchNo;
        data["expiredDate"] = this.expiredDate ? formatDate(this.expiredDate) : <any>undefined;
        data["netUnitCost"] = this.netUnitCost;
        data["decimal"] = this.decimal;
        data["tax"] = this.tax;
        data["subTotal"] = this.subTotal;
        data["sale"] = this.sale ? this.sale.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface ISaleDetail extends IBaseEntity {
    saleId?: string;
    productId?: string;
    quantity?: number;
    batchNo?: string;
    expiredDate?: Date | undefined;
    netUnitCost?: number;
    decimal?: number;
    tax?: number;
    subTotal?: number;
    sale?: Sale;
}

export abstract class BaseAuditableEntity extends BaseEntity implements IBaseAuditableEntity {
    created?: Date;
    createdBy?: string | undefined;
    lastModified?: Date | undefined;
    lastModifiedBy?: string | undefined;

    constructor(data?: IBaseAuditableEntity) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
        }
    }

    static override fromJS(data: any): BaseAuditableEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseAuditableEntity' cannot be instantiated.");
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        super.toJSON(data);
        return data;
    }
}

export interface IBaseAuditableEntity extends IBaseEntity {
    created?: Date;
    createdBy?: string | undefined;
    lastModified?: Date | undefined;
    lastModifiedBy?: string | undefined;
}

export class Sale extends BaseAuditableEntity implements ISale {
    saleDate?: Date;
    referenceNo?: string;
    warehouseId?: string;
    customerId?: string;
    bullerId?: string;
    attachmentUrl?: string | undefined;
    orderTax?: number | undefined;
    orderDiscountTypeId?: string;
    discount?: number | undefined;
    shippingCost?: number | undefined;
    saleStatusId?: string;
    paymentStatusId?: string;
    saleNote?: string | undefined;
    staffNote?: string | undefined;
    saleDetails?: SaleDetail[];

    constructor(data?: ISale) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.saleDate = _data["saleDate"] ? new Date(_data["saleDate"].toString()) : <any>undefined;
            this.referenceNo = _data["referenceNo"];
            this.warehouseId = _data["warehouseId"];
            this.customerId = _data["customerId"];
            this.bullerId = _data["bullerId"];
            this.attachmentUrl = _data["attachmentUrl"];
            this.orderTax = _data["orderTax"];
            this.orderDiscountTypeId = _data["orderDiscountTypeId"];
            this.discount = _data["discount"];
            this.shippingCost = _data["shippingCost"];
            this.saleStatusId = _data["saleStatusId"];
            this.paymentStatusId = _data["paymentStatusId"];
            this.saleNote = _data["saleNote"];
            this.staffNote = _data["staffNote"];
            if (Array.isArray(_data["saleDetails"])) {
                this.saleDetails = [] as any;
                for (let item of _data["saleDetails"])
                    this.saleDetails!.push(SaleDetail.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Sale {
        data = typeof data === 'object' ? data : {};
        let result = new Sale();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saleDate"] = this.saleDate ? formatDate(this.saleDate) : <any>undefined;
        data["referenceNo"] = this.referenceNo;
        data["warehouseId"] = this.warehouseId;
        data["customerId"] = this.customerId;
        data["bullerId"] = this.bullerId;
        data["attachmentUrl"] = this.attachmentUrl;
        data["orderTax"] = this.orderTax;
        data["orderDiscountTypeId"] = this.orderDiscountTypeId;
        data["discount"] = this.discount;
        data["shippingCost"] = this.shippingCost;
        data["saleStatusId"] = this.saleStatusId;
        data["paymentStatusId"] = this.paymentStatusId;
        data["saleNote"] = this.saleNote;
        data["staffNote"] = this.staffNote;
        if (Array.isArray(this.saleDetails)) {
            data["saleDetails"] = [];
            for (let item of this.saleDetails)
                data["saleDetails"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ISale extends IBaseAuditableEntity {
    saleDate?: Date;
    referenceNo?: string;
    warehouseId?: string;
    customerId?: string;
    bullerId?: string;
    attachmentUrl?: string | undefined;
    orderTax?: number | undefined;
    orderDiscountTypeId?: string;
    discount?: number | undefined;
    shippingCost?: number | undefined;
    saleStatusId?: string;
    paymentStatusId?: string;
    saleNote?: string | undefined;
    staffNote?: string | undefined;
    saleDetails?: SaleDetail[];
}

export abstract class BaseEvent implements IBaseEvent {

    constructor(data?: IBaseEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): BaseEvent {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEvent' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IBaseEvent {
}

export class GetSaleListQuery extends DataGridModel implements IGetSaleListQuery {
    cacheKey?: string;

    constructor(data?: IGetSaleListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.cacheKey = _data["cacheKey"];
        }
    }

    static override fromJS(data: any): GetSaleListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetSaleListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cacheKey"] = this.cacheKey;
        super.toJSON(data);
        return data;
    }
}

export interface IGetSaleListQuery extends IDataGridModel {
    cacheKey?: string;
}

export class CreateSaleCommand implements ICreateSaleCommand {
    saleDate?: Date;
    referenceNo?: string;
    warehouseId?: string;
    customerId?: string;
    bullerId?: string;
    attachmentUrl?: string | undefined;
    orderTax?: number | undefined;
    orderDiscountTypeId?: string;
    discount?: number | undefined;
    shippingCost?: number | undefined;
    saleStatusId?: string;
    paymentStatusId?: string;
    saleNote?: string | undefined;
    staffNote?: string | undefined;
    saleDetails?: SaleDetail[];
    cacheKey?: string;

    constructor(data?: ICreateSaleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.saleDate = _data["saleDate"] ? new Date(_data["saleDate"].toString()) : <any>undefined;
            this.referenceNo = _data["referenceNo"];
            this.warehouseId = _data["warehouseId"];
            this.customerId = _data["customerId"];
            this.bullerId = _data["bullerId"];
            this.attachmentUrl = _data["attachmentUrl"];
            this.orderTax = _data["orderTax"];
            this.orderDiscountTypeId = _data["orderDiscountTypeId"];
            this.discount = _data["discount"];
            this.shippingCost = _data["shippingCost"];
            this.saleStatusId = _data["saleStatusId"];
            this.paymentStatusId = _data["paymentStatusId"];
            this.saleNote = _data["saleNote"];
            this.staffNote = _data["staffNote"];
            if (Array.isArray(_data["saleDetails"])) {
                this.saleDetails = [] as any;
                for (let item of _data["saleDetails"])
                    this.saleDetails!.push(SaleDetail.fromJS(item));
            }
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): CreateSaleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSaleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saleDate"] = this.saleDate ? formatDate(this.saleDate) : <any>undefined;
        data["referenceNo"] = this.referenceNo;
        data["warehouseId"] = this.warehouseId;
        data["customerId"] = this.customerId;
        data["bullerId"] = this.bullerId;
        data["attachmentUrl"] = this.attachmentUrl;
        data["orderTax"] = this.orderTax;
        data["orderDiscountTypeId"] = this.orderDiscountTypeId;
        data["discount"] = this.discount;
        data["shippingCost"] = this.shippingCost;
        data["saleStatusId"] = this.saleStatusId;
        data["paymentStatusId"] = this.paymentStatusId;
        data["saleNote"] = this.saleNote;
        data["staffNote"] = this.staffNote;
        if (Array.isArray(this.saleDetails)) {
            data["saleDetails"] = [];
            for (let item of this.saleDetails)
                data["saleDetails"].push(item.toJSON());
        }
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface ICreateSaleCommand {
    saleDate?: Date;
    referenceNo?: string;
    warehouseId?: string;
    customerId?: string;
    bullerId?: string;
    attachmentUrl?: string | undefined;
    orderTax?: number | undefined;
    orderDiscountTypeId?: string;
    discount?: number | undefined;
    shippingCost?: number | undefined;
    saleStatusId?: string;
    paymentStatusId?: string;
    saleNote?: string | undefined;
    staffNote?: string | undefined;
    saleDetails?: SaleDetail[];
    cacheKey?: string;
}

export class UpdateSaleCommand implements IUpdateSaleCommand {
    id?: string;
    saleDate?: Date;
    referenceNo?: string;
    warehouseId?: string;
    customerId?: string;
    bullerId?: string;
    attachmentUrl?: string | undefined;
    orderTax?: number | undefined;
    orderDiscountTypeId?: string;
    discount?: number | undefined;
    shippingCost?: number | undefined;
    saleStatusId?: string;
    paymentStatusId?: string;
    saleNote?: string | undefined;
    staffNote?: string | undefined;
    saleDetails?: SaleDetail[];
    cacheKey?: string;

    constructor(data?: IUpdateSaleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.saleDate = _data["saleDate"] ? new Date(_data["saleDate"].toString()) : <any>undefined;
            this.referenceNo = _data["referenceNo"];
            this.warehouseId = _data["warehouseId"];
            this.customerId = _data["customerId"];
            this.bullerId = _data["bullerId"];
            this.attachmentUrl = _data["attachmentUrl"];
            this.orderTax = _data["orderTax"];
            this.orderDiscountTypeId = _data["orderDiscountTypeId"];
            this.discount = _data["discount"];
            this.shippingCost = _data["shippingCost"];
            this.saleStatusId = _data["saleStatusId"];
            this.paymentStatusId = _data["paymentStatusId"];
            this.saleNote = _data["saleNote"];
            this.staffNote = _data["staffNote"];
            if (Array.isArray(_data["saleDetails"])) {
                this.saleDetails = [] as any;
                for (let item of _data["saleDetails"])
                    this.saleDetails!.push(SaleDetail.fromJS(item));
            }
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): UpdateSaleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSaleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["saleDate"] = this.saleDate ? formatDate(this.saleDate) : <any>undefined;
        data["referenceNo"] = this.referenceNo;
        data["warehouseId"] = this.warehouseId;
        data["customerId"] = this.customerId;
        data["bullerId"] = this.bullerId;
        data["attachmentUrl"] = this.attachmentUrl;
        data["orderTax"] = this.orderTax;
        data["orderDiscountTypeId"] = this.orderDiscountTypeId;
        data["discount"] = this.discount;
        data["shippingCost"] = this.shippingCost;
        data["saleStatusId"] = this.saleStatusId;
        data["paymentStatusId"] = this.paymentStatusId;
        data["saleNote"] = this.saleNote;
        data["staffNote"] = this.staffNote;
        if (Array.isArray(this.saleDetails)) {
            data["saleDetails"] = [];
            for (let item of this.saleDetails)
                data["saleDetails"].push(item.toJSON());
        }
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface IUpdateSaleCommand {
    id?: string;
    saleDate?: Date;
    referenceNo?: string;
    warehouseId?: string;
    customerId?: string;
    bullerId?: string;
    attachmentUrl?: string | undefined;
    orderTax?: number | undefined;
    orderDiscountTypeId?: string;
    discount?: number | undefined;
    shippingCost?: number | undefined;
    saleStatusId?: string;
    paymentStatusId?: string;
    saleNote?: string | undefined;
    staffNote?: string | undefined;
    saleDetails?: SaleDetail[];
    cacheKey?: string;
}

export class TreeNodeModel implements ITreeNodeModel {
    key?: any;
    label?: string;
    icon?: string;
    parentId?: any | undefined;
    data?: string;
    disabledCheckbox?: boolean;
    disabled?: boolean;
    visible?: boolean;
    isActive?: boolean;
    partialSelected?: boolean;
    leaf?: boolean;
    children?: TreeNodeModel[];

    constructor(data?: ITreeNodeModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.label = _data["label"];
            this.icon = _data["icon"];
            this.parentId = _data["parentId"];
            this.data = _data["data"];
            this.disabledCheckbox = _data["disabledCheckbox"];
            this.disabled = _data["disabled"];
            this.visible = _data["visible"];
            this.isActive = _data["isActive"];
            this.partialSelected = _data["partialSelected"];
            this.leaf = _data["leaf"];
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(TreeNodeModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TreeNodeModel {
        data = typeof data === 'object' ? data : {};
        let result = new TreeNodeModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["label"] = this.label;
        data["icon"] = this.icon;
        data["parentId"] = this.parentId;
        data["data"] = this.data;
        data["disabledCheckbox"] = this.disabledCheckbox;
        data["disabled"] = this.disabled;
        data["visible"] = this.visible;
        data["isActive"] = this.isActive;
        data["partialSelected"] = this.partialSelected;
        data["leaf"] = this.leaf;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITreeNodeModel {
    key?: any;
    label?: string;
    icon?: string;
    parentId?: any | undefined;
    data?: string;
    disabledCheckbox?: boolean;
    disabled?: boolean;
    visible?: boolean;
    isActive?: boolean;
    partialSelected?: boolean;
    leaf?: boolean;
    children?: TreeNodeModel[];
}

export class PaginatedResponseOfAppMenuModel implements IPaginatedResponseOfAppMenuModel {
    items?: AppMenuModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfAppMenuModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AppMenuModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfAppMenuModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfAppMenuModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfAppMenuModel {
    items?: AppMenuModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };
}

export class AppMenuModel implements IAppMenuModel {
    id?: string;
    parentId?: string | undefined;
    parentName?: string;
    label?: string;
    routerLink?: string;
    icon?: string;
    tooltip?: string;
    isActive?: boolean;
    orderNo?: number;
    visible?: boolean;
    visibility?: string;
    description?: string;
    active?: string;
    menuTypeId?: string;
    menuTypeName?: string;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IAppMenuModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.parentId = _data["parentId"];
            this.parentName = _data["parentName"];
            this.label = _data["label"];
            this.routerLink = _data["routerLink"];
            this.icon = _data["icon"];
            this.tooltip = _data["tooltip"];
            this.isActive = _data["isActive"];
            this.orderNo = _data["orderNo"];
            this.visible = _data["visible"];
            this.visibility = _data["visibility"];
            this.description = _data["description"];
            this.active = _data["active"];
            this.menuTypeId = _data["menuTypeId"];
            this.menuTypeName = _data["menuTypeName"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): AppMenuModel {
        data = typeof data === 'object' ? data : {};
        let result = new AppMenuModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["parentId"] = this.parentId;
        data["parentName"] = this.parentName;
        data["label"] = this.label;
        data["routerLink"] = this.routerLink;
        data["icon"] = this.icon;
        data["tooltip"] = this.tooltip;
        data["isActive"] = this.isActive;
        data["orderNo"] = this.orderNo;
        data["visible"] = this.visible;
        data["visibility"] = this.visibility;
        data["description"] = this.description;
        data["active"] = this.active;
        data["menuTypeId"] = this.menuTypeId;
        data["menuTypeName"] = this.menuTypeName;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IAppMenuModel {
    id?: string;
    parentId?: string | undefined;
    parentName?: string;
    label?: string;
    routerLink?: string;
    icon?: string;
    tooltip?: string;
    isActive?: boolean;
    orderNo?: number;
    visible?: boolean;
    visibility?: string;
    description?: string;
    active?: string;
    menuTypeId?: string;
    menuTypeName?: string;
    optionsDataSources?: { [key: string]: any; };
}

export class GetAppMenuListQuery extends DataGridModel implements IGetAppMenuListQuery {

    constructor(data?: IGetAppMenuListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): GetAppMenuListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAppMenuListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IGetAppMenuListQuery extends IDataGridModel {
}

export class SidebarMenuModel implements ISidebarMenuModel {
    id?: string;
    label?: string;
    routerLink?: string;
    icon?: string;
    visible?: boolean;
    tooltip?: string;
    orderNo?: number;
    parentId?: string | undefined;
    parentLabel?: string;
    items?: SidebarMenuModel[] | undefined;

    constructor(data?: ISidebarMenuModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.label = _data["label"];
            this.routerLink = _data["routerLink"];
            this.icon = _data["icon"];
            this.visible = _data["visible"];
            this.tooltip = _data["tooltip"];
            this.orderNo = _data["orderNo"];
            this.parentId = _data["parentId"];
            this.parentLabel = _data["parentLabel"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(SidebarMenuModel.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SidebarMenuModel {
        data = typeof data === 'object' ? data : {};
        let result = new SidebarMenuModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["label"] = this.label;
        data["routerLink"] = this.routerLink;
        data["icon"] = this.icon;
        data["visible"] = this.visible;
        data["tooltip"] = this.tooltip;
        data["orderNo"] = this.orderNo;
        data["parentId"] = this.parentId;
        data["parentLabel"] = this.parentLabel;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISidebarMenuModel {
    id?: string;
    label?: string;
    routerLink?: string;
    icon?: string;
    visible?: boolean;
    tooltip?: string;
    orderNo?: number;
    parentId?: string | undefined;
    parentLabel?: string;
    items?: SidebarMenuModel[] | undefined;
}

export class CreateAppMenuCommand implements ICreateAppMenuCommand {
    label!: string;
    routerLink!: string;
    icon?: string;
    isActive?: boolean;
    visible?: boolean;
    orderNo?: number;
    tooltip?: string;
    description?: string;
    menuTypeId!: string;
    parentId?: string | undefined;

    constructor(data?: ICreateAppMenuCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.label = _data["label"];
            this.routerLink = _data["routerLink"];
            this.icon = _data["icon"];
            this.isActive = _data["isActive"];
            this.visible = _data["visible"];
            this.orderNo = _data["orderNo"];
            this.tooltip = _data["tooltip"];
            this.description = _data["description"];
            this.menuTypeId = _data["menuTypeId"];
            this.parentId = _data["parentId"];
        }
    }

    static fromJS(data: any): CreateAppMenuCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAppMenuCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["label"] = this.label;
        data["routerLink"] = this.routerLink;
        data["icon"] = this.icon;
        data["isActive"] = this.isActive;
        data["visible"] = this.visible;
        data["orderNo"] = this.orderNo;
        data["tooltip"] = this.tooltip;
        data["description"] = this.description;
        data["menuTypeId"] = this.menuTypeId;
        data["parentId"] = this.parentId;
        return data;
    }
}

export interface ICreateAppMenuCommand {
    label: string;
    routerLink: string;
    icon?: string;
    isActive?: boolean;
    visible?: boolean;
    orderNo?: number;
    tooltip?: string;
    description?: string;
    menuTypeId: string;
    parentId?: string | undefined;
}

export class UpdateAppMenuCommand implements IUpdateAppMenuCommand {
    id?: string;
    label!: string;
    routerLink!: string;
    icon?: string;
    isActive?: boolean;
    visible?: boolean;
    orderNo?: number;
    tooltip?: string;
    description?: string;
    menuTypeId!: string;
    parentId?: string | undefined;
    cacheKey?: string;

    constructor(data?: IUpdateAppMenuCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.label = _data["label"];
            this.routerLink = _data["routerLink"];
            this.icon = _data["icon"];
            this.isActive = _data["isActive"];
            this.visible = _data["visible"];
            this.orderNo = _data["orderNo"];
            this.tooltip = _data["tooltip"];
            this.description = _data["description"];
            this.menuTypeId = _data["menuTypeId"];
            this.parentId = _data["parentId"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): UpdateAppMenuCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAppMenuCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["label"] = this.label;
        data["routerLink"] = this.routerLink;
        data["icon"] = this.icon;
        data["isActive"] = this.isActive;
        data["visible"] = this.visible;
        data["orderNo"] = this.orderNo;
        data["tooltip"] = this.tooltip;
        data["description"] = this.description;
        data["menuTypeId"] = this.menuTypeId;
        data["parentId"] = this.parentId;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface IUpdateAppMenuCommand {
    id?: string;
    label: string;
    routerLink: string;
    icon?: string;
    isActive?: boolean;
    visible?: boolean;
    orderNo?: number;
    tooltip?: string;
    description?: string;
    menuTypeId: string;
    parentId?: string | undefined;
    cacheKey?: string;
}

export class PaginatedResponseOfAppNotificationModel implements IPaginatedResponseOfAppNotificationModel {
    items?: AppNotificationModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfAppNotificationModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AppNotificationModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfAppNotificationModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfAppNotificationModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfAppNotificationModel {
    items?: AppNotificationModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };
}

export class AppNotificationModel implements IAppNotificationModel {
    id?: string;
    title?: string;
    description?: string | undefined;
    url?: string | undefined;
    senderId?: string;
    recieverId?: string;
    isSeen?: boolean;
    created?: Date;
    createdBy?: string | undefined;
    lastModified?: Date | undefined;
    lastModifiedBy?: string | undefined;

    constructor(data?: IAppNotificationModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.description = _data["description"];
            this.url = _data["url"];
            this.senderId = _data["senderId"];
            this.recieverId = _data["recieverId"];
            this.isSeen = _data["isSeen"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
        }
    }

    static fromJS(data: any): AppNotificationModel {
        data = typeof data === 'object' ? data : {};
        let result = new AppNotificationModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["description"] = this.description;
        data["url"] = this.url;
        data["senderId"] = this.senderId;
        data["recieverId"] = this.recieverId;
        data["isSeen"] = this.isSeen;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        return data;
    }
}

export interface IAppNotificationModel {
    id?: string;
    title?: string;
    description?: string | undefined;
    url?: string | undefined;
    senderId?: string;
    recieverId?: string;
    isSeen?: boolean;
    created?: Date;
    createdBy?: string | undefined;
    lastModified?: Date | undefined;
    lastModifiedBy?: string | undefined;
}

export class GetAppNotificationListQuery extends DataGridModel implements IGetAppNotificationListQuery {

    constructor(data?: IGetAppNotificationListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): GetAppNotificationListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAppNotificationListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IGetAppNotificationListQuery extends IDataGridModel {
}

export class PaginatedResponseOfAppPageModel implements IPaginatedResponseOfAppPageModel {
    items?: AppPageModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfAppPageModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AppPageModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfAppPageModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfAppPageModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfAppPageModel {
    items?: AppPageModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };
}

export class AppPageModel implements IAppPageModel {
    id?: string;
    title?: string;
    subTitle?: string;
    componentName?: string;
    appPageLayout?: string;
    gridFilterType?: string;
    showRowActionCol?: boolean;
    rowActionType?: string | undefined;
    showSelectCheckbox?: boolean;
    appPageFields?: AppPageFieldModel[];
    toolbarActions?: AppPageActionModel[];
    rowActions?: AppPageActionModel[];
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IAppPageModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.subTitle = _data["subTitle"];
            this.componentName = _data["componentName"];
            this.appPageLayout = _data["appPageLayout"];
            this.gridFilterType = _data["gridFilterType"];
            this.showRowActionCol = _data["showRowActionCol"];
            this.rowActionType = _data["rowActionType"];
            this.showSelectCheckbox = _data["showSelectCheckbox"];
            if (Array.isArray(_data["appPageFields"])) {
                this.appPageFields = [] as any;
                for (let item of _data["appPageFields"])
                    this.appPageFields!.push(AppPageFieldModel.fromJS(item));
            }
            if (Array.isArray(_data["toolbarActions"])) {
                this.toolbarActions = [] as any;
                for (let item of _data["toolbarActions"])
                    this.toolbarActions!.push(AppPageActionModel.fromJS(item));
            }
            if (Array.isArray(_data["rowActions"])) {
                this.rowActions = [] as any;
                for (let item of _data["rowActions"])
                    this.rowActions!.push(AppPageActionModel.fromJS(item));
            }
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): AppPageModel {
        data = typeof data === 'object' ? data : {};
        let result = new AppPageModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["subTitle"] = this.subTitle;
        data["componentName"] = this.componentName;
        data["appPageLayout"] = this.appPageLayout;
        data["gridFilterType"] = this.gridFilterType;
        data["showRowActionCol"] = this.showRowActionCol;
        data["rowActionType"] = this.rowActionType;
        data["showSelectCheckbox"] = this.showSelectCheckbox;
        if (Array.isArray(this.appPageFields)) {
            data["appPageFields"] = [];
            for (let item of this.appPageFields)
                data["appPageFields"].push(item.toJSON());
        }
        if (Array.isArray(this.toolbarActions)) {
            data["toolbarActions"] = [];
            for (let item of this.toolbarActions)
                data["toolbarActions"].push(item.toJSON());
        }
        if (Array.isArray(this.rowActions)) {
            data["rowActions"] = [];
            for (let item of this.rowActions)
                data["rowActions"].push(item.toJSON());
        }
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IAppPageModel {
    id?: string;
    title?: string;
    subTitle?: string;
    componentName?: string;
    appPageLayout?: string;
    gridFilterType?: string;
    showRowActionCol?: boolean;
    rowActionType?: string | undefined;
    showSelectCheckbox?: boolean;
    appPageFields?: AppPageFieldModel[];
    toolbarActions?: AppPageActionModel[];
    rowActions?: AppPageActionModel[];
    optionsDataSources?: { [key: string]: any; };
}

export class AppPageFieldModel implements IAppPageFieldModel {
    id?: string;
    field?: string;
    header?: string;
    fieldType?: string;
    dbField?: string;
    format?: string;
    textAlign?: string;
    isSortable?: boolean;
    isFilterable?: boolean;
    dsName?: string;
    isGlobalFilterable?: boolean;
    filterType?: string;
    enableLink?: boolean;
    linkBaseUrl?: string;
    linkValueFieldName?: string;
    bgColor?: string;
    color?: string;
    isVisible?: boolean;
    sortOrder?: number;
    isActive?: boolean;

    constructor(data?: IAppPageFieldModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.field = _data["field"];
            this.header = _data["header"];
            this.fieldType = _data["fieldType"];
            this.dbField = _data["dbField"];
            this.format = _data["format"];
            this.textAlign = _data["textAlign"];
            this.isSortable = _data["isSortable"];
            this.isFilterable = _data["isFilterable"];
            this.dsName = _data["dsName"];
            this.isGlobalFilterable = _data["isGlobalFilterable"];
            this.filterType = _data["filterType"];
            this.enableLink = _data["enableLink"];
            this.linkBaseUrl = _data["linkBaseUrl"];
            this.linkValueFieldName = _data["linkValueFieldName"];
            this.bgColor = _data["bgColor"];
            this.color = _data["color"];
            this.isVisible = _data["isVisible"];
            this.sortOrder = _data["sortOrder"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): AppPageFieldModel {
        data = typeof data === 'object' ? data : {};
        let result = new AppPageFieldModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["field"] = this.field;
        data["header"] = this.header;
        data["fieldType"] = this.fieldType;
        data["dbField"] = this.dbField;
        data["format"] = this.format;
        data["textAlign"] = this.textAlign;
        data["isSortable"] = this.isSortable;
        data["isFilterable"] = this.isFilterable;
        data["dsName"] = this.dsName;
        data["isGlobalFilterable"] = this.isGlobalFilterable;
        data["filterType"] = this.filterType;
        data["enableLink"] = this.enableLink;
        data["linkBaseUrl"] = this.linkBaseUrl;
        data["linkValueFieldName"] = this.linkValueFieldName;
        data["bgColor"] = this.bgColor;
        data["color"] = this.color;
        data["isVisible"] = this.isVisible;
        data["sortOrder"] = this.sortOrder;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IAppPageFieldModel {
    id?: string;
    field?: string;
    header?: string;
    fieldType?: string;
    dbField?: string;
    format?: string;
    textAlign?: string;
    isSortable?: boolean;
    isFilterable?: boolean;
    dsName?: string;
    isGlobalFilterable?: boolean;
    filterType?: string;
    enableLink?: boolean;
    linkBaseUrl?: string;
    linkValueFieldName?: string;
    bgColor?: string;
    color?: string;
    isVisible?: boolean;
    sortOrder?: number;
    isActive?: boolean;
}

export class AppPageActionModel implements IAppPageActionModel {
    id?: string;
    actionName?: string;
    actionType?: string;
    severity?: string;
    permissions?: string;
    caption?: string;
    showCaption?: boolean;
    icon?: string;
    functionName?: string;
    navigationUrl?: string;
    params?: string;
    position?: string;
    parentId?: string | undefined;
    sortOrder?: number;
    isVisible?: boolean;

    constructor(data?: IAppPageActionModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.actionName = _data["actionName"];
            this.actionType = _data["actionType"];
            this.severity = _data["severity"];
            this.permissions = _data["permissions"];
            this.caption = _data["caption"];
            this.showCaption = _data["showCaption"];
            this.icon = _data["icon"];
            this.functionName = _data["functionName"];
            this.navigationUrl = _data["navigationUrl"];
            this.params = _data["params"];
            this.position = _data["position"];
            this.parentId = _data["parentId"];
            this.sortOrder = _data["sortOrder"];
            this.isVisible = _data["isVisible"];
        }
    }

    static fromJS(data: any): AppPageActionModel {
        data = typeof data === 'object' ? data : {};
        let result = new AppPageActionModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["actionName"] = this.actionName;
        data["actionType"] = this.actionType;
        data["severity"] = this.severity;
        data["permissions"] = this.permissions;
        data["caption"] = this.caption;
        data["showCaption"] = this.showCaption;
        data["icon"] = this.icon;
        data["functionName"] = this.functionName;
        data["navigationUrl"] = this.navigationUrl;
        data["params"] = this.params;
        data["position"] = this.position;
        data["parentId"] = this.parentId;
        data["sortOrder"] = this.sortOrder;
        data["isVisible"] = this.isVisible;
        return data;
    }
}

export interface IAppPageActionModel {
    id?: string;
    actionName?: string;
    actionType?: string;
    severity?: string;
    permissions?: string;
    caption?: string;
    showCaption?: boolean;
    icon?: string;
    functionName?: string;
    navigationUrl?: string;
    params?: string;
    position?: string;
    parentId?: string | undefined;
    sortOrder?: number;
    isVisible?: boolean;
}

export class GetAppPageListQuery extends DataGridModel implements IGetAppPageListQuery {

    constructor(data?: IGetAppPageListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): GetAppPageListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAppPageListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IGetAppPageListQuery extends IDataGridModel {
}

export class CreateAppPageCommand implements ICreateAppPageCommand {
    title?: string;
    subTitle?: string;
    componentName?: string;
    appPageLayout?: string;
    cacheKey?: string;

    constructor(data?: ICreateAppPageCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.subTitle = _data["subTitle"];
            this.componentName = _data["componentName"];
            this.appPageLayout = _data["appPageLayout"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): CreateAppPageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAppPageCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["subTitle"] = this.subTitle;
        data["componentName"] = this.componentName;
        data["appPageLayout"] = this.appPageLayout;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface ICreateAppPageCommand {
    title?: string;
    subTitle?: string;
    componentName?: string;
    appPageLayout?: string;
    cacheKey?: string;
}

export class UpdateAppPageCommand implements IUpdateAppPageCommand {
    id?: string;
    title?: string;
    subTitle?: string;
    componentName?: string;
    appPageLayout?: string;
    cacheKey?: string;

    constructor(data?: IUpdateAppPageCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.subTitle = _data["subTitle"];
            this.componentName = _data["componentName"];
            this.appPageLayout = _data["appPageLayout"];
            this.cacheKey = _data["cacheKey"];
        }
    }

    static fromJS(data: any): UpdateAppPageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAppPageCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["subTitle"] = this.subTitle;
        data["componentName"] = this.componentName;
        data["appPageLayout"] = this.appPageLayout;
        data["cacheKey"] = this.cacheKey;
        return data;
    }
}

export interface IUpdateAppPageCommand {
    id?: string;
    title?: string;
    subTitle?: string;
    componentName?: string;
    appPageLayout?: string;
    cacheKey?: string;
}

export class UpsertAppPageCommand extends AppPageModel implements IUpsertAppPageCommand {

    constructor(data?: IUpsertAppPageCommand) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): UpsertAppPageCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpsertAppPageCommand();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IUpsertAppPageCommand extends IAppPageModel {
}

export class FileResponse implements IFileResponse {
    filePath?: string;

    constructor(data?: IFileResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.filePath = _data["filePath"];
        }
    }

    static fromJS(data: any): FileResponse {
        data = typeof data === 'object' ? data : {};
        let result = new FileResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filePath"] = this.filePath;
        return data;
    }
}

export interface IFileResponse {
    filePath?: string;
}

export class RemoveFileRequest implements IRemoveFileRequest {
    relativePath?: string;

    constructor(data?: IRemoveFileRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.relativePath = _data["relativePath"];
        }
    }

    static fromJS(data: any): RemoveFileRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RemoveFileRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["relativePath"] = this.relativePath;
        return data;
    }
}

export interface IRemoveFileRequest {
    relativePath?: string;
}

export class PaginatedResponseOfRoleModel implements IPaginatedResponseOfRoleModel {
    items?: RoleModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfRoleModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RoleModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfRoleModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfRoleModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfRoleModel {
    items?: RoleModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };
}

export class RoleModel implements IRoleModel {
    id?: string;
    name?: string;
    roleMenus?: string[];
    permissions?: string[];
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IRoleModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["roleMenus"])) {
                this.roleMenus = [] as any;
                for (let item of _data["roleMenus"])
                    this.roleMenus!.push(item);
            }
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(item);
            }
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): RoleModel {
        data = typeof data === 'object' ? data : {};
        let result = new RoleModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.roleMenus)) {
            data["roleMenus"] = [];
            for (let item of this.roleMenus)
                data["roleMenus"].push(item);
        }
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IRoleModel {
    id?: string;
    name?: string;
    roleMenus?: string[];
    permissions?: string[];
    optionsDataSources?: { [key: string]: any; };
}

export class GetRoleListQuery extends DataGridModel implements IGetRoleListQuery {

    constructor(data?: IGetRoleListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): GetRoleListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoleListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IGetRoleListQuery extends IDataGridModel {
}

export class CreateRoleCommand implements ICreateRoleCommand {
    name?: string;
    rolemenus?: string[];
    permissions?: string[];

    constructor(data?: ICreateRoleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["rolemenus"])) {
                this.rolemenus = [] as any;
                for (let item of _data["rolemenus"])
                    this.rolemenus!.push(item);
            }
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateRoleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRoleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.rolemenus)) {
            data["rolemenus"] = [];
            for (let item of this.rolemenus)
                data["rolemenus"].push(item);
        }
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        return data;
    }
}

export interface ICreateRoleCommand {
    name?: string;
    rolemenus?: string[];
    permissions?: string[];
}

export class UpdateRoleCommand implements IUpdateRoleCommand {
    id?: string;
    name?: string;
    rolemenus?: string[];
    permissions?: string[];

    constructor(data?: IUpdateRoleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["rolemenus"])) {
                this.rolemenus = [] as any;
                for (let item of _data["rolemenus"])
                    this.rolemenus!.push(item);
            }
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateRoleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateRoleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.rolemenus)) {
            data["rolemenus"] = [];
            for (let item of this.rolemenus)
                data["rolemenus"].push(item);
        }
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item);
        }
        return data;
    }
}

export interface IUpdateRoleCommand {
    id?: string;
    name?: string;
    rolemenus?: string[];
    permissions?: string[];
}

export class PaginatedResponseOfAppUserModel implements IPaginatedResponseOfAppUserModel {
    items?: AppUserModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };

    constructor(data?: IPaginatedResponseOfAppUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(AppUserModel.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
        }
    }

    static fromJS(data: any): PaginatedResponseOfAppUserModel {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseOfAppUserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        return data;
    }
}

export interface IPaginatedResponseOfAppUserModel {
    items?: AppUserModel[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    optionsDataSources?: { [key: string]: any; };
}

export class AppUserModel implements IAppUserModel {
    id?: string;
    username?: string;
    password?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    phoneNumber?: string | undefined;
    photoUrl?: string | undefined;
    isActive?: boolean;
    status?: string;
    assignedRoles?: string;
    optionsDataSources?: { [key: string]: any; };
    roles?: string[] | undefined;

    constructor(data?: IAppUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.password = _data["password"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.phoneNumber = _data["phoneNumber"];
            this.photoUrl = _data["photoUrl"];
            this.isActive = _data["isActive"];
            this.status = _data["status"];
            this.assignedRoles = _data["assignedRoles"];
            if (_data["optionsDataSources"]) {
                this.optionsDataSources = {} as any;
                for (let key in _data["optionsDataSources"]) {
                    if (_data["optionsDataSources"].hasOwnProperty(key))
                        (<any>this.optionsDataSources)![key] = _data["optionsDataSources"][key];
                }
            }
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): AppUserModel {
        data = typeof data === 'object' ? data : {};
        let result = new AppUserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["password"] = this.password;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["phoneNumber"] = this.phoneNumber;
        data["photoUrl"] = this.photoUrl;
        data["isActive"] = this.isActive;
        data["status"] = this.status;
        data["assignedRoles"] = this.assignedRoles;
        if (this.optionsDataSources) {
            data["optionsDataSources"] = {};
            for (let key in this.optionsDataSources) {
                if (this.optionsDataSources.hasOwnProperty(key))
                    (<any>data["optionsDataSources"])[key] = (<any>this.optionsDataSources)[key];
            }
        }
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }
}

export interface IAppUserModel {
    id?: string;
    username?: string;
    password?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    phoneNumber?: string | undefined;
    photoUrl?: string | undefined;
    isActive?: boolean;
    status?: string;
    assignedRoles?: string;
    optionsDataSources?: { [key: string]: any; };
    roles?: string[] | undefined;
}

export class GetAppUserListQuery extends DataGridModel implements IGetAppUserListQuery {

    constructor(data?: IGetAppUserListQuery) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): GetAppUserListQuery {
        data = typeof data === 'object' ? data : {};
        let result = new GetAppUserListQuery();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IGetAppUserListQuery extends IDataGridModel {
}

export class CreateAppUserCommand implements ICreateAppUserCommand {
    username!: string;
    password!: string;
    email?: string;
    firstName!: string;
    lastName!: string;
    phoneNumber?: string;
    photoUrl?: string;
    isActive?: boolean;
    roles?: string[] | undefined;

    constructor(data?: ICreateAppUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.phoneNumber = _data["phoneNumber"];
            this.photoUrl = _data["photoUrl"];
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateAppUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAppUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["phoneNumber"] = this.phoneNumber;
        data["photoUrl"] = this.photoUrl;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }
}

export interface ICreateAppUserCommand {
    username: string;
    password: string;
    email?: string;
    firstName: string;
    lastName: string;
    phoneNumber?: string;
    photoUrl?: string;
    isActive?: boolean;
    roles?: string[] | undefined;
}

export class UpdateAppUserCommand implements IUpdateAppUserCommand {
    id?: string;
    username?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    phoneNumber?: string;
    isActive?: boolean;
    roles?: string[] | undefined;

    constructor(data?: IUpdateAppUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.phoneNumber = _data["phoneNumber"];
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateAppUserCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAppUserCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["phoneNumber"] = this.phoneNumber;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        return data;
    }
}

export interface IUpdateAppUserCommand {
    id?: string;
    username?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    phoneNumber?: string;
    isActive?: boolean;
    roles?: string[] | undefined;
}

export class ChangeUserPhotoCommand implements IChangeUserPhotoCommand {
    photoUrl?: string;

    constructor(data?: IChangeUserPhotoCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.photoUrl = _data["photoUrl"];
        }
    }

    static fromJS(data: any): ChangeUserPhotoCommand {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeUserPhotoCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["photoUrl"] = this.photoUrl;
        return data;
    }
}

export interface IChangeUserPhotoCommand {
    photoUrl?: string;
}

export class UpdateAppUserBasicCommand implements IUpdateAppUserBasicCommand {
    id?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    phoneNumber?: string;

    constructor(data?: IUpdateAppUserBasicCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.phoneNumber = _data["phoneNumber"];
        }
    }

    static fromJS(data: any): UpdateAppUserBasicCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAppUserBasicCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["phoneNumber"] = this.phoneNumber;
        return data;
    }
}

export interface IUpdateAppUserBasicCommand {
    id?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    phoneNumber?: string;
}

export class AddToRolesCommand implements IAddToRolesCommand {
    id?: string;
    roleNames?: string[];

    constructor(data?: IAddToRolesCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["roleNames"])) {
                this.roleNames = [] as any;
                for (let item of _data["roleNames"])
                    this.roleNames!.push(item);
            }
        }
    }

    static fromJS(data: any): AddToRolesCommand {
        data = typeof data === 'object' ? data : {};
        let result = new AddToRolesCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.roleNames)) {
            data["roleNames"] = [];
            for (let item of this.roleNames)
                data["roleNames"].push(item);
        }
        return data;
    }
}

export interface IAddToRolesCommand {
    id?: string;
    roleNames?: string[];
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class LMSException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isLMSException = true;

    static isLMSException(obj: any): obj is LMSException {
        return obj.isLMSException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new LMSException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}